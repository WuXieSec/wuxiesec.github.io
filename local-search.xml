<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>内网渗透基础知识(二)</title>
    <link href="/2022/10/21/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E4%BA%8C)/"/>
    <url>/2022/10/21/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<h1 id="内网渗透测试基础知识-二"><a href="#内网渗透测试基础知识-二" class="headerlink" title="内网渗透测试基础知识(二)"></a>内网渗透测试基础知识(二)</h1><h3 id="域用户与机器用户介绍"><a href="#域用户与机器用户介绍" class="headerlink" title="域用户与机器用户介绍"></a>域用户与机器用户介绍</h3><h4 id="域用户"><a href="#域用户" class="headerlink" title="域用户"></a>域用户</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">1、域用户就是在域环境中的用户，在域控制器被创建，并且其所有信息都保存在活动目录中。<br>2、域用户位于域全局组Domain Users中，而计算机本地用户账户位于本地User组中。当计算机加入域时，全局组Domain Users会被添加到计算机本地User组中。<br></code></pre></td></tr></table></figure><h5 id="查看域中所有域用户命令"><a href="#查看域中所有域用户命令" class="headerlink" title="查看域中所有域用户命令"></a>查看域中所有域用户命令</h5><p><code>net user /domain</code><br><img src="/../images/Intranet_Book/18.png"></p><h4 id="机器用户"><a href="#机器用户" class="headerlink" title="机器用户"></a>机器用户</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">机器用户其实是一种特殊的域用户。查询活动目录时随便选中Domain Computer组的一台机器账户，查看其objectClass属性，可以发现该对象时computer类的示例，并且computer类时user类的子类<br></code></pre></td></tr></table></figure><p><img src="/../images/Intranet_Book/19.png"></p><ul><li>查询域内所有的机器用户</li></ul><p><code>net group &quot;Domain Computers&quot; /domain</code><br><img src="/../images/Intranet_Book/20.png"></p><ul><li>当获取一台域中主机的控制权后，发现没有域中用户凭据或者在域中没有权限去执行命令，此时可以用一些系统提权的方法，将当前用户提升到SYSTEM，以system权限进行域内操作</li><li>例子：<ul><li>查看本地用户，然后执行域命令，提示拒绝访问<br><img src="/../images/Intranet_Book/21.png"></li><li>提权以后尝试执行<br><img src="/../images/Intranet_Book/22.png"></li></ul></li></ul><h3 id="域用户组的分类和权限"><a href="#域用户组的分类和权限" class="headerlink" title="域用户组的分类和权限"></a>域用户组的分类和权限</h3><h4 id="组的用途"><a href="#组的用途" class="headerlink" title="组的用途"></a>组的用途</h4><ul><li>组（Group）就是用户账号的集合，按照用途可以分为通讯组和安全组<ul><li>通讯组就是一个通讯群组。比如把某部门员工都放进去某个通讯组，当给这个通讯组发消息时，组内所有用户都能收到</li><li>安全组就是用户权限的集合。例如 管理员不用去一个用一个用户的下发权限，只需要一个组，对该组有相应的权限，那么组里的用户也就有了</li></ul></li></ul><h4 id="安全组的权限"><a href="#安全组的权限" class="headerlink" title="安全组的权限"></a>安全组的权限</h4><ul><li>根据组的作用范围，安全组可以分为：(注意：这里的作用范围指的是组在域树或域林中的应用的范围)<ul><li>域本地组</li><li>通用组</li><li>全局组</li></ul></li></ul><h5 id="1、域本地组"><a href="#1、域本地组" class="headerlink" title="1、域本地组"></a>1、域本地组</h5><ul><li>域本地组的成员可以来自森林中的任何域，域本地组用来访问同一域中的资源。在本机模式中的域本地组可以包含森林中任意域内的用户账户、全局组和通用组以及同一域内的域本地组。在混合模式域中，它们能包含任意域中的用户账户和全局组。</li><li>查询所有的域本地组<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Adfind.exe -b &quot;dc=god,dc=org&quot; -bit -f &quot;(&amp;(objectClass=group)(grouptype:AND:=4))&quot; cn -dn<br></code></pre></td></tr></table></figure><img src="/../images/Intranet_Book/23.png"></li><li>常见的系统内置的域本地组及其权限如下：<ul><li>Administrators：管理员组，该组的成员可以不受限制地访问域中的资源，是域林强大的服务管理组</li><li>Print Operators：打印机操作员组，该组的成员可以管理网络中的打印机，还可以在本地登录和关闭域控制器。</li><li>Backip Operators 备份操作员组：该组的成员可以在域控制器中执行备份和还原操作，还可以在本地登录和关闭域控制器</li><li>Remote Deskop Users：远程登录组，只有该组的成员才能远程登录服务器的权限</li><li>Acccount Operators：账号操作员组，该组的成员可以创建和管理该域中的用户和组，还为其设置权限，也可以在本地登录域控制器</li><li>Server Operators：服务器操作员组，该组的成员可以管理域服务器</li></ul></li></ul><h5 id="2、通用组（Unlversal-Group）"><a href="#2、通用组（Unlversal-Group）" class="headerlink" title="2、通用组（Unlversal Group）"></a>2、通用组（Unlversal Group）</h5><ul><li>通用组成员来自森林中的任何域，通用组用来访问任意域中的资源。</li><li>查询所有通讯组<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Adfind.exe -b dc=god,dc=org -bit -f &quot;(&amp;(objectClass=group)(grouptype:AND:=8))&quot; cn -dn<br></code></pre></td></tr></table></figure><img src="/../images/Intranet_Book/24.png"></li><li>两个常见的系统内置的通用组及其权限<ul><li>Enterprise Admins: 组织系统管理员，该组是域林的根域中的一个组。该组中的成员在域林的每个域中都是Administrators组的成员，因此对所有的域控制器都有完全控制控制权。</li><li>Schema Admins:架构管理组，该组是域森林的根域中的一个组。该组中的成员可以修改活动目录，如架构分区中新增类或属性</li></ul></li></ul><h5 id="3、全局组"><a href="#3、全局组" class="headerlink" title="3、全局组"></a>3、全局组</h5><ul><li>全局组可以作用于域林的所有域，是介于域本地组和通用组。全域组只能包含本域的用户。</li><li>查询所有全域组<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Adfind.exe -b &quot;dc=god,dc=org&quot; -bit -f &quot;(&amp;(objectClass=group)(grouptype:AND:=2))&quot; cn -dn<br></code></pre></td></tr></table></figure><img src="/../images/Intranet_Book/25.png"></li><li>常见的系统内置的全局组及其权限如下<ul><li>Domain Admins: 域管理员组，该组的成员在所有加入域的服务器上拥有完整的管理员权限。如果希望某用户成为域管理员，就可以加其添加到Domain Admins组中。该组会被添加到本地域的Administros组中，因此获得Administrators组的所有权限。同时，该组默认被添加到每台计算机的本地Administrators组中，所以会获得域中所有计算机的控制权。</li><li>Domain Users: 域用户组，该组的成员是所有的域用户。默认情况下，新建的用户都是该组的成员</li><li>Domain Computers: 域成员主机组，该组的成员是域中所有的域成员主机，任何新建立的计算机账号都是该组的成员。</li><li>Domain Controllers:域控制器组，该组的成员包含域中所有的域控制器</li><li>Domain Guests:域访客用户组，该组的成员默认为域访客用户</li><li>Group Policy Creator Owners:新建组策略对象组，该组的成员可以修改域的组策略</li></ul></li></ul><h3 id="组织单位"><a href="#组织单位" class="headerlink" title="组织单位"></a>组织单位</h3><ul><li>当需要对用户赋予某特殊的权限时，可以设置一个域用户组，对这个组配置资源访问权限，再将该用户拉进这个组，这样用户就拥有了这个组的权限。也可以指定部门来做统一用户管理。</li><li>组织单位（Organization Unit，OU）是一个可以将域中的用户，组和计算机等对象放入其中的容器的对象。<br><img src="/../images/Intranet_Book/26.png"></li><li>所有组织单位在活动目录中都是organizationalUnit类的示例<br><img src="/../images/Intranet_Book/27.png"></li><li>可以通过<code>(objectClass=organizationalUnit)</code>或者<code>(objectCategory=organizationalUnit)</code>来查询所有的OU：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Adfind.exe -b &quot;dc=god,dc=org&quot; -f &quot;(objectClass=organizationalUnit)&quot; -dn<br></code></pre></td></tr></table></figure><img src="/../images/Intranet_Book/28.png"></li></ul><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><ul><li>访问控制是指Windows操作系统使用内置授权和访问控制结束，确定经过身份验证的用户是否具有访问资源的正确权限，控制主体操作（读取、写入、删除、更改等）对象（Object）的行为是否具有合法权限</li></ul><h4 id="Windows访问控制模型"><a href="#Windows访问控制模型" class="headerlink" title="Windows访问控制模型"></a>Windows访问控制模型</h4><ul><li>Windows访问控制模型（Access Control Model）是Windows系统安全性的基础构件。</li><li>访问控制模型主要由访问令牌（Access Token）和安全描述符（Security Descriptor）两部分组成，分别由访问着和被访问者持有。</li></ul><h5 id="访问令牌"><a href="#访问令牌" class="headerlink" title="访问令牌"></a>访问令牌</h5><ul><li>访问令牌主要包含以下信息：<ul><li>标识用户账户的SID（Security ID，安全标识）。</li><li>标识以后所属的组的SID</li><li>标识当前登录会话的登录SID</li><li>用户或者用户所属的用户组持有特权列表</li><li>标识对象所有者的SID</li><li>标识对象所有者组的SID</li><li>标识用户主安全组的SID</li><li>用户创建安全对象而不指定安全描述符时系统使用的默认DACL（Discretionary Access Control List，自主访问控制列表）</li><li>访问令牌的来源。</li><li>访问令牌的类型，即令牌是主令牌还是模拟令牌。</li><li>限制SID的可选列表</li><li>当前模拟等级</li><li>其他信息</li></ul></li></ul><h5 id="安全描述符"><a href="#安全描述符" class="headerlink" title="安全描述符"></a>安全描述符</h5><ul><li>安全描述符（Security Descriptor）是一种每个安全对象相关联的数据结构，其中包含域安全对象相关联的安全信息</li><li>安全描述符主要由SID和ACL（Access Control List，访问控制列表）组成。</li><li>SID用来标识用户账户和该用户所属的组。ACL分为DACL和SACL两种</li></ul><h4 id="访问控制列表"><a href="#访问控制列表" class="headerlink" title="访问控制列表"></a>访问控制列表</h4><ul><li>访问控制列表（ACL）是访问控制项（Access Control Entry ，ACE）的列表。</li></ul><h5 id="DACL"><a href="#DACL" class="headerlink" title="DACL"></a>DACL</h5><ul><li>DACL（自主访问控制列表）是安全对象的访问控制策略，其中定义了该安全对象的访问控制策略，用于指定允许或者拒绝特定安全主体对该安全对象的访问。DACL是由一条条的访问控制项（ACE）条目构成的</li></ul><h5 id="SACL"><a href="#SACL" class="headerlink" title="SACL"></a>SACL</h5><ul><li>SACL（System Access Control List，访问控制列表）是安全主体对安全对象的访问行为的审计策略。SACL也是由一条一条的ACE条构成，</li></ul><h5 id="查看与修改访问控制列表"><a href="#查看与修改访问控制列表" class="headerlink" title="查看与修改访问控制列表"></a>查看与修改访问控制列表</h5><ul><li><p>Icacls是一种命令行工具，使用icacls命令可以查看或修改指定文件上的访问控制列表（ACL），并将存储的DACL应用于指定目录中的文件</p></li><li><p>查看指定文件的ACL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">icacls C:\users\Administrator\Desktop\sec<br></code></pre></td></tr></table></figure><p><img src="/../images/Intranet_Book/29.png"></p></li><li><p>icacls可以查询到的各种权限说明如下：</p><ul><li>简单权限序列<ul><li>N，无访问权限</li><li>F，完全访问权限</li><li>M，修改权限</li><li>RX，读取和执行权限</li><li>R，只读权限</li><li>W，只写权限</li><li>D，删除权限</li></ul></li><li>在”()”中以”,”分隔的特定权限列表<ul><li>DE，删除</li><li>RC，读取控制</li><li>WDAC，写入DAC，WO，写入所有者</li><li>S，同步</li><li>AS，访问系统安全性</li><li>MA，允许的最大值</li><li>GR，一般性读取</li><li>GW，一般性写入</li><li>GE，一般性执行</li><li>GA，全为一般性</li><li>RD，读取数据&#x2F;列出目录</li><li>WD，写入数据&#x2F;添加文件</li><li>AD，附件数据&#x2F;添加子目录</li><li>REA，读取 展属性</li><li>WEA，写入扩展属性</li><li>X，执行&#x2F;遍历</li><li>DC，删除子项</li><li>RA，读取属性</li><li>WA，写入属性</li></ul></li></ul></li><li><p>继承权限可以优先于每种格式，单只应用于目录：</p><ul><li>OI，对象继承</li><li>CI，容器继承</li><li>IO，仅继承</li><li>NP，不传播继承</li><li>I，从父容器继承的权限</li></ul></li><li><p>将指定目录及子目录下所有文件的ACL备份到file.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">icacls C:\Users\Administrator\Desktop\* /save file.txt /T<br></code></pre></td></tr></table></figure><p><img src="/../images/Intranet_Book/30.png"></p></li><li><p>将file.txt 内所有被分的文件ACL还原到指定目录及其子目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">icacls C:\Users\Administrator\Desktop /restore file.txt<br></code></pre></td></tr></table></figure><p><img src="/../images/Intranet_Book/31.png"></p></li></ul><h3 id="组策略"><a href="#组策略" class="headerlink" title="组策略"></a>组策略</h3><ul><li>组策略（Group Policy）是Windows环境下管理用户的一种手段，可以控制用户账户和计算机账户的工作环境</li><li>组策略提供了操作系统、应用程序和活动目录中用户设置的集中化管理和配置</li><li>主要包含但不限于以下功能：<ul><li>账户策略的配置<ul><li>如设置用户账户的密码长度，复杂程度，密码使用期限，账户锁定策略等</li></ul></li><li>脚本的配置：<ul><li>如登录与注销，启动与关机脚本的设置</li></ul></li><li>应用程序的安装与删除：<ul><li>用户登录或计算机启动时，自动为用户安装应用，自动修复应用的错误或自动删除应用</li></ul></li><li>文件夹重定向：<ul><li>如改变文件、“开始”菜单等文件夹的存储位置</li></ul></li><li>限制访问可移动存储设备</li><li>用户工作环境的配置</li><li>其他系统配置</li></ul></li></ul><h4 id="组策略对象"><a href="#组策略对象" class="headerlink" title="组策略对象"></a>组策略对象</h4><ul><li>组策略对象（Group Policy Object，GPO）即组策略设置的集合，其中包含应用于特定用户或计算机的策略信息和具体配置</li><li>可以使用组策略管理来查看和编辑每个GPO的设。</li><li>两个默认组策略Default Domain Policy和Default DOmain Controller Policy，它们在域控制器被建立时自动创建<br><img src="/../images/Intranet_Book/32.png"><ul><li>Default Domain Policy默认组策略对象<ul><li>Default Domain Policy应用到其所在域的所有用户和计算机，右侧作用域中的这条组策略连接到整个god.org域<br><img src="/../images/Intranet_Book/33.png"></li></ul></li><li>Default DOmain Controller Policy 默认组策略对象<ul><li>Default DOmain Controller Policy 应用到Domain Controllers 中所有的用户和计算机<br><img src="/../images/Intranet_Book/34.png"></li></ul></li></ul></li></ul><h4 id="组策略的创建"><a href="#组策略的创建" class="headerlink" title="组策略的创建"></a>组策略的创建</h4><ul><li>打开组策略管理-右键”组策略对象“-新建<br><img src="/../images/Intranet_Book/35.png"></li><li>输入新建的组策略名称<br><img src="/../images/Intranet_Book/36.png"></li><li>选择一个组织单位，右键链接现有<br><img src="/../images/Intranet_Book/37.png"></li><li>选择刚才新建的组策略对象<br><img src="/../images/Intranet_Book/38.png"></li><li>选择组策略对象右键编辑<br><img src="/../images/Intranet_Book/39.png"></li><li>配置一个组策略<br><img src="/../images/Intranet_Book/39.1.png"></li><li>新配置的组策略，需要更新一下，否则不失效<br><img src="/../images/Intranet_Book/39.2.png"></li></ul><h3 id="内网域环境搭建"><a href="#内网域环境搭建" class="headerlink" title="内网域环境搭建"></a>内网域环境搭建</h3><h4 id="单域环境搭建"><a href="#单域环境搭建" class="headerlink" title="单域环境搭建"></a>单域环境搭建</h4><ul><li>详情如下<br><a href="http://www.phpinfo.top/2022/10/09/%E5%9F%9F%E6%8E%A7%E6%90%AD%E5%BB%BA/">域环境搭建</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网渗透基础知识(一)</title>
    <link href="/2022/10/18/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/10/18/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="内网渗透测试基础知识-一"><a href="#内网渗透测试基础知识-一" class="headerlink" title="内网渗透测试基础知识(一)"></a>内网渗透测试基础知识(一)</h1><h3 id="内网渗透是什么"><a href="#内网渗透是什么" class="headerlink" title="内网渗透是什么"></a>内网渗透是什么</h3><ul><li>内网渗透（Intranet Exploitation）<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">内网渗透是指获取目标服务器控制权之后，通过内网信息收集、内网代理、权限提升、横向移动等技术，对其所处的内网环境进行渗透，并最终获取内网其他主机权限的过程，如域控制器，运维主机等<br></code></pre></td></tr></table></figure></li></ul><h3 id="内网工作环境"><a href="#内网工作环境" class="headerlink" title="内网工作环境"></a>内网工作环境</h3><h4 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">1、工作组（Work Group）是局域网中的一个概念。<br>2、它是最常见最简单最普通的资源管理模式，就是将不同的电脑按功能分别列入不同的组中，以方便管理。<br></code></pre></td></tr></table></figure><p><img src="/../images/Intranet_Book/1.png"></p><ul><li>通过此电脑属性-更改设置-计算机名更改-工作组<br><img src="/../images/Intranet_Book/2.png"><br><img src="/../images/Intranet_Book/3.png"><br><img src="/../images/Intranet_Book/4.png"></li></ul><h4 id="域（Domain）"><a href="#域（Domain）" class="headerlink" title="域（Domain）"></a>域（Domain）</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">域（domain）是一个比工作组更高级的计算机资源管理模式，既可以用于计算机数量较少的小规模网络环境，也可以用于计算机数量众多的大型网络环境。<br>域（domain）是一个有安全边界的计算机集合，在同一个域中的计算机彼此之间已经建立了信任关系，在域内访问其他机器，不再需要被访问机器的许可<br></code></pre></td></tr></table></figure><h5 id="单域"><a href="#单域" class="headerlink" title="单域"></a>单域</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">单域是指网络环境中只有一个域。在一个计算机数量较少，地理位置固定的小规模组织中，建立一个单独的域。<br></code></pre></td></tr></table></figure><p><img src="/../images/Intranet_Book/5.png"></p><h5 id="父域和子域"><a href="#父域和子域" class="headerlink" title="父域和子域"></a>父域和子域</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">在某些情况下，为了满足某些特殊情况或者要求，需要在一个域中划分出多个域，被划分的域称为父域，划分出来的各部分域称为子域<br></code></pre></td></tr></table></figure><p><img src="/../images/Intranet_Book/6.png"></p><h5 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">域树是多个域通过建立信任关系组成一个域集合。在域树中，所有的域共享同一表结构和配置，所有的域名形成一个连续的名字空间；域树中域的命名空间具有连续性，并且域名层次越深，级别越低。<br><br>在域树中，域管理员只能管理本域，不能访问或者管理其他域。如果两个域之间需要互相访问，就需要建立信任关系(Trust Relation)<br></code></pre></td></tr></table></figure><p><img src="/../images/Intranet_Book/7.png"></p><h5 id="域林"><a href="#域林" class="headerlink" title="域林"></a>域林</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">域林是指有一个或多个没有形成连续名字空间的域树组成域树集合<br></code></pre></td></tr></table></figure><ul><li>域林与域树的区别<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">域林中的域或域树之间没有形成连续的名字空间，而域树是由一些具有连续名字空间的域组成。<br>但是域林中的所有域树仍共享同一个表结构、配置和全局目录。<br></code></pre></td></tr></table></figure><img src="/../images/Intranet_Book/8.png"></li></ul><h5 id="域控制器"><a href="#域控制器" class="headerlink" title="域控制器"></a>域控制器</h5><ul><li>什么是域控制器<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">域控制器(Domain Controller, DC，域控)是域环境核心的服务器计算机，用于在域中响应安全身份认证请求，负责允许或着拒绝发出请求的主机访问域内资源，以及对用户进行身份验证，存储用户账户信息并执行域的安全策略等。<br><br>一个域环境可以拥有一台或者多台域控制器，每台域控制器各自存储一份所在域的活动目录的可写副本，对活动墓库的任何修改都可以从源域控制器同步复制到域，域树或者域林的其他控制器上。即使一台瘫痪，另外一台域控制器可以继续工作，以保证环境的正常运行<br></code></pre></td></tr></table></figure></li></ul><h3 id="活动目录"><a href="#活动目录" class="headerlink" title="活动目录"></a>活动目录</h3><h4 id="活动目录的含义"><a href="#活动目录的含义" class="headerlink" title="活动目录的含义"></a>活动目录的含义</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">活动目录(Active Directory)是指安装在域控制器上，为整个域环境提供集中式目录管理服务的组件。<br></code></pre></td></tr></table></figure><h4 id="活动目录的主要功能"><a href="#活动目录的主要功能" class="headerlink" title="活动目录的主要功能"></a>活动目录的主要功能</h4><ul><li>计算机集中管理<ul><li>集中管理所有加入域的服务器及客户端计算机，统一下发组策略</li></ul></li><li>用户集中管理：<ul><li>集中管理域用户，组织通讯录、用户组，对用户进行统一的身份认证，资源授权等。</li></ul></li><li>资源集中管理：<ul><li>集中管理域中的打印机，文件共享服务等网络资源</li></ul></li><li>环境集中配置：<ul><li>集中的配置域中计算机的工作环境，如统一计算机桌面，统一网络连接配置，统一计算机安全配置等</li></ul></li><li>应用集中管理：<ul><li>对域中的计算机统一推送软件，安全补丁，防病毒系统，安装网络打印机等</li></ul></li></ul><h4 id="Ntds-dit文件"><a href="#Ntds-dit文件" class="headerlink" title="Ntds.dit文件"></a>Ntds.dit文件</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">Ntds.dit 文件是域环境的域控制器上保存的一个二进制文件，是主要的活动目录数据库，其文件的路径为“%SystemRoot%\ntds\ntds.dit&quot;.<br><br>非域环境即工作组环境中，用户的登录凭据等信息存储在本地SAM文件中。<br></code></pre></td></tr></table></figure><h4 id="活动目录的访问"><a href="#活动目录的访问" class="headerlink" title="活动目录的访问"></a>活动目录的访问</h4><ul><li>使用微软官方提供的AD Explorer工具连接域控制器访问活动目录<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">可以方便浏览活动目录数据库、自定义快速入口、查看对象属性、编辑权限、进行精确搜寻等。<br><br>在域中任意一台主机上，以域用户身份进行连接域控制器，连接成功后可以查看域中的各种信息<br></code></pre></td></tr></table></figure><img src="/../images/Intranet_Book/9.png"><br><img src="/../images/Intranet_Book/10.png"></li></ul><h4 id="活动目录的分区"><a href="#活动目录的分区" class="headerlink" title="活动目录的分区"></a>活动目录的分区</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">活动目录可以支持数以千万的对象。为了扩大这些对象，微软将活动目录数据库划分为多个分区，以方便进行复制和管理，每个逻辑分区在域林中的域控制器之间分别复制更改。这些分区被称为上下文命名（Naming Context NC)<br></code></pre></td></tr></table></figure><ul><li>活动目录预定以了域分区、配置分区和架构分区三个分区</li></ul><h5 id="域分区"><a href="#域分区" class="headerlink" title="域分区"></a>域分区</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">域分区（Domain NC）用于存储与该域有关的对象信息，这些信息是特定于该域的。如：域中计算机，用户，组，组织单位等信息。<br>在域林中，每个域的域控制器各自拥有一份属于自己的域分区，只会被复制到本域的所有域控制器中。<br></code></pre></td></tr></table></figure><ul><li>所圈出来的”DC&#x3D;test,DC&#x3D;com”就是test.com域的分区<br><img src="/../images/Intranet_Book/11.png"></li><li>域分区主要包括以下：<ul><li>CN&#x3D;Builtin：内置了本地域组的安全组的容器。</li><li>CN&#x3D;Computers：机器用户容器，其中包含所有加入域的主机。</li><li>OU&#x3D;Domain Controllers：域控制器的容器，其中包含域中所有的域控制器</li><li>CN&#x3D;ForeignSecurityPrincipals：包含域中所有来自域的林外部域的组中成员</li><li>CN&#x3D;Managed Service Accounts：托管服务账户的容器</li><li>CN&#x3D;System：各种预配置对象的容器，包含信任对象、DNS对象和组策略对象。</li><li>CN&#x3D;Users：用户和组对象的默认容器。<br><img src="/../images/Intranet_Book/12.png"></li></ul></li></ul><h5 id="配置分区"><a href="#配置分区" class="headerlink" title="配置分区"></a>配置分区</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">配置分区（Configuration NC）存储整个域林的主要配置信息，包括有关站点、服务、分区和整个活动目录结构的信息。<br>整个域林共享一份想听的配置分区，会被复制到域林中所有的域控制器上。<br></code></pre></td></tr></table></figure><p><img src="/../images/Intranet_Book/14.png"></p><h5 id="架构分区"><a href="#架构分区" class="headerlink" title="架构分区"></a>架构分区</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">架构分区（Schema NC）存储整个域林的架构信息，包括活动目录中的所有类，对象和属性的定义数据。<br>整个域林共享一份相同的架构分区，会被复制到林中所有域的域控制器中。<br></code></pre></td></tr></table></figure><ul><li>“CN&#x3D;Schema,Cn&#x3D;Configuration,DC&#x3D;test,DC&#x3D;com”就是架构分区<br><img src="/../images/Intranet_Book/15.png"></li></ul><h4 id="活动目录的查询"><a href="#活动目录的查询" class="headerlink" title="活动目录的查询"></a>活动目录的查询</h4><h5 id="使用Adfind查询活动目录"><a href="#使用Adfind查询活动目录" class="headerlink" title="使用Adfind查询活动目录"></a>使用Adfind查询活动目录</h5><ul><li>Adfind是一款C++语言编写的域中信息查询工具，可以在域中任何一台主机上使用。语法格式为<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Adfind.exe [switches] [-b basedn] [-f filter] [attr list]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">-b 是指定一个BaseDN作为查询的根，-f为LDAP过滤条件，attr list 为需要显示的属性</span><br></code></pre></td></tr></table></figure></li><li>实列：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">执行下面命令：</span><br>Adfind.exe -b dc=test,dc=com -f &quot;objectClass=computer&quot; name operatingSystem<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询test.com域中的所有computer对象，并过滤对象的<span class="hljs-string">&quot;name&quot;</span>和“operatingSystem”属性</span><br></code></pre></td></tr></table></figure><img src="/../images/Intranet_Book/16.png"></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Adfind.exe -b dc=test,dc=com -f &quot;objectClass=user&quot; cn<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询test.com域中的所有user对象，并过滤对象的“cn”属性</span><br></code></pre></td></tr></table></figure><p><img src="/../images/Intranet_Book/17.png"></p><ul><li>Adfind.exe 常用命令<table><thead><tr><th>查询需求</th><th>AdFind命令</th></tr></thead><tbody><tr><td>查询test.com域的所有computer对象并显示所有属性</td><td>Adfind.exe -b dc&#x3D;test,dc&#x3D;com -f “objectClass&#x3D;computer”</td></tr><tr><td>查询test.com域的所有computer对象并过滤对象的name和operatinfSystem的属性</td><td>Adfind.exe -b dc&#x3D;test.com,dc&#x3D;com -f “objectClass&#x3D;computer” name operatingSystem</td></tr><tr><td>查询指定主机的相关信息</td><td>Adfind.exe -sc c:&lt;Name&#x2F;SamAccountName&gt; 例子：Adfind.exe -sc c:172_16_0_15</td></tr><tr><td>查询当前域中主机的数量</td><td>Adfind.exe -sc adobjcnt:computer</td></tr><tr><td>查询当前域中被禁用的主机</td><td>Adfind.exe -sc computers_disabled</td></tr><tr><td>查询当前域中不需要密码的主机</td><td>Adfind.exe -sc computers_pwdnotreqd</td></tr><tr><td>查询域中在线的计算机</td><td>Adfind.exe -sc computers_active</td></tr><tr><td>查询test.com域的所以user对象并过滤对象的cn属性</td><td>Adfind.exe -b dc&#x3D;test,dc&#x3D;com -f “objectClass&#x3D;user” cn</td></tr><tr><td>查询当前登录的用户信息和token</td><td>Adfind.exe -sc whoami</td></tr><tr><td>查询指定用户的相关信息</td><td>Adfind.exe -sc u:&lt;Name&#x2F;SameAccoutName&gt; 例子：Adfind.exe -sc u:administrator</td></tr><tr><td>查询当前域中用户数量</td><td>Adfind.exe -sc adobjcnt:user</td></tr><tr><td>查询当前域中被禁用的用户</td><td>Adfind.exe -sc users_disabled</td></tr><tr><td>查询域中密码不过期的用户</td><td>Adfind.exe -sc users_noexpire</td></tr><tr><td>查询域中不需要密码的用户</td><td>Adfind.exe -sc users_pwdnotreqd</td></tr><tr><td>查询当前域中所有域控制器(返回FQDN信息)</td><td>Adfind.exe dclist</td></tr><tr><td>查询域中所有只读写的域控制器</td><td>Adfind.exe -sc dclist:rodc</td></tr><tr><td>查询当前域中所有可读写的域控制器</td><td>Adfind.exe -sc dclist:!rodc</td></tr><tr><td>查询所有的组策略对象并显示所有属性</td><td>Adfind.exe -sc gpodmp</td></tr><tr><td>查询域信任关系</td><td>Adfind.exe -f “objectclass&#x3D;trusteddomain”</td></tr><tr><td>查询test.com域中具有高权限的SPN</td><td>Adfind.exe -b “DC&#x3D;test,DC&#x3D;com” -f “&amp;(servicePrincipalName&#x3D;*)(admincount&#x3D;1)” servicePrincipalName</td></tr></tbody></table></li></ul>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫-文件</title>
    <link href="/2022/10/14/%E6%96%87%E4%BB%B6/"/>
    <url>/2022/10/14/%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="文件的打开和关闭"><a href="#文件的打开和关闭" class="headerlink" title="文件的打开和关闭"></a>文件的打开和关闭</h3><h4 id="文件的路径"><a href="#文件的路径" class="headerlink" title="文件的路径"></a>文件的路径</h4><ul><li>绝对路径：指的是绝对位置，完整的描述了目标所在地，所有目录层级关系是一目了然的<ul><li>例如： <code>E:\python</code>,从电脑的盘符开始，表示的就是一个绝对路径。</li></ul></li><li>相对路径：是从当前文件所在的文件夹开始的路径<ul><li><code>text.txt</code>,是从当前文件夹中查找test.txt文件</li><li><code>./test.txt</code>,也是在当前文件夹里查找<code>test.txt</code>文件，<code>./</code>表示的是当前文件夹</li><li><code>../test.txt</code>,从当前文件夹的上一级文件夹里查找<code>test.txt</code>文件。<code>../</code>表示的是上一级文件夹</li><li><code>demo/test.txt</code>,在当前文件夹里查找demo这个文件夹，并在这个文件夹里查找<code>test.txt</code>文件</li></ul></li></ul><h4 id="访问模式"><a href="#访问模式" class="headerlink" title="访问模式"></a>访问模式</h4><table><thead><tr><th>访问模式</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，则报错。这是默认模式</td></tr><tr><td>w</td><td>打开一个文件只用与写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新的文件</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说新的内容将被写入到已有内容之后。如果该文件不存在，创建新文件进行写入</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果文件不存在，创新文件用于读写</td></tr><tr><td>w+</td><td>打开一个文件用于读写，如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头</td></tr><tr><td>wb</td><td>以二进制打来一个文件只用与写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写，如果该文件已存在则将其覆盖 。如果该文件不存在，创建新文件。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><h4 id="打开文件-x2F-创建文件"><a href="#打开文件-x2F-创建文件" class="headerlink" title="打开文件&#x2F;创建文件"></a>打开文件&#x2F;创建文件</h4><ul><li>在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件 open(文件路径，访问模式)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># open(文件路径，访问模式)</span><br><span class="hljs-comment"># 模式 ： w 可写 r 可读</span><br><span class="hljs-comment"># 创建文件</span><br><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-comment"># 打开文件</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-comment"># 文件里面写一句话（英文）</span><br>f.write(<span class="hljs-string">&#x27;hello word&#x27;</span>)<br><span class="hljs-comment">#  文件的关闭</span><br>fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br>fp.write(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>fp.close()<br></code></pre></td></tr></table></figure></li></ul><h3 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h3><h4 id="写数据"><a href="#写数据" class="headerlink" title="写数据"></a>写数据</h4><ul><li>write方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br>fp.write(<span class="hljs-string">&#x27;hello,world,sectest \n&#x27;</span> * <span class="hljs-number">5</span>)<br>fp.close()<br><span class="hljs-comment"># 如果再次运行这段代码，还是打印五</span><br><span class="hljs-comment"># 如果文件存在 会先清空原来的数据 然后在写</span><br><span class="hljs-comment"># 想要在执行每一次之后都要追加数据 模式由w变为a 就可以没你执行追加数据了</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-comment"># 默认情况下 read是一字节一字节的读 效率比较低</span><br>content = fp.read()<br><span class="hljs-built_in">print</span>(content)<br><span class="hljs-comment"># readline() 是一行一行的读取 但是只能读一行</span><br>content = fp.readline()<br><span class="hljs-built_in">print</span>(content)<br><span class="hljs-comment"># readlines 可以按照行来读取 并且以一个列表形式返回</span><br>content = fp.readlines()<br><span class="hljs-built_in">print</span>(content)<br></code></pre></td></tr></table></figure><h3 id="文件的序列化和反序列化"><a href="#文件的序列化和反序列化" class="headerlink" title="文件的序列化和反序列化"></a>文件的序列化和反序列化</h3><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><ul><li>将对象（列表、字典、元组等）转换为字符序列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-comment"># 默认情况下 对象是无法写入到文件中 如果想写入到文件 那么必须使用序列化操作</span><br>name_list = [<span class="hljs-string">&#x27;zhangshan&#x27;</span>,<span class="hljs-string">&#x27;lisi&#x27;</span>]<br>fp.write(name_list) <span class="hljs-comment"># TypeError: write() argument must be str, not list</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="dumps"><a href="#dumps" class="headerlink" title="dumps()"></a>dumps()</h5><ul><li>我们在使用scrapy框架的时候 该框架会返回一个对象 我们要将对象写入到文件中 就要使用json.dumps<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># （1）创建文件</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-comment"># （2） 定义列表</span><br>name_list = [<span class="hljs-string">&#x27;zhangshan&#x27;</span>,<span class="hljs-string">&#x27;lisi&#x27;</span>]<br><span class="hljs-comment"># （3）倒入json模块到该文件中</span><br><span class="hljs-keyword">import</span> json<br><span class="hljs-comment"># (4) 序列化</span><br><span class="hljs-comment"># 将python 对象编程json字符串</span><br>names = json.dumps(name_list)<br>f.write(names)<br>f.close<br></code></pre></td></tr></table></figure></li></ul><h6 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br>name_list = [<span class="hljs-string">&#x27;zhangshan&#x27;</span>,<span class="hljs-string">&#x27;lisi&#x27;</span>]<br><span class="hljs-keyword">import</span> json<br><span class="hljs-comment"># 相当于names = json.dumps(ame_list) 和fp.write(names)</span><br>json.dump(name_list,fp)<br>fp.close()<br></code></pre></td></tr></table></figure><h5 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h5><ul><li>将json的字符串变成一个python对象<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;ext.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>content = f.read()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(content)) <span class="hljs-comment"># str</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="loads"><a href="#loads" class="headerlink" title="loads"></a>loads</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;ext.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>content = f.read()<br><span class="hljs-keyword">import</span> json<br>result = json.loads(content)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result))<br>f.close()<br></code></pre></td></tr></table></figure><h6 id="load"><a href="#load" class="headerlink" title="load"></a>load</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-keyword">import</span> json<br>result = json.load(f)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(result))<br>f.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫-函数</title>
    <link href="/2022/10/13/%E5%87%BD%E6%95%B0/"/>
    <url>/2022/10/13/%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><ul><li>定义函数的格式如下:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>():<br>    代码<br></code></pre></td></tr></table></figure></li><li>例子<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>() :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">456</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">567</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><ul><li>定义函数之后，就相当于有了一个具有某些功能的代码，想要让代码执行，必须调用函数，通过函数名()即可完成调用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义完函数后，函数是不会自动执行的，需要调用它才可以执行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>() :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">456</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">567</span>)<br><br>f()<br>f()<br><span class="hljs-comment"># 每次调用函数时，函数都会从头开始执行，当这个函数中的代码执行完毕后，就意味着调用结束了</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用函数来计算1和2的和</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum</span>():<br>  a = <span class="hljs-number">1</span><br>  b = <span class="hljs-number">2</span><br>  c = a + b<br>  <span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-built_in">sum</span>() <span class="hljs-comment"># 3</span><br><span class="hljs-comment">#  不实用</span><br></code></pre></td></tr></table></figure><ul><li>位置参数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 为了让一个函数更通用，既想让它计算哪两个数的和，就让它计算哪两个数的和，在定义函数的时候可以让函数接收数据，就解决了这个问题，这就是函数的参数</span><br><span class="hljs-comment"># 定义函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a,b</span>):<br>  c = a + b<br>  <span class="hljs-built_in">print</span>(c)<br><span class="hljs-comment"># 调用带有参数的函数，要保证一一对应</span><br><span class="hljs-comment">#  位置参数 按照位置一一对应来传递参数</span><br><span class="hljs-built_in">sum</span>(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>) <span class="hljs-comment"># 300</span><br></code></pre></td></tr></table></figure></li><li>关键字传参(一般不用)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">b = <span class="hljs-number">200</span>,a = <span class="hljs-number">100</span></span>) :<br>  c = a + b<br>  <span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">sum</span>()<br></code></pre></td></tr></table></figure></li><li>定义函数的时候 sum(a,b) 我们称a 和 b 为形式参数 简称 形参</li><li>调用函数的时候 sum(1,2) 我们称1和2为实际参数 简称 实参</li></ul><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><h1 id="返回值的关键字是return，存在函数中"><a href="#返回值的关键字是return，存在函数中" class="headerlink" title="返回值的关键字是return，存在函数中"></a>返回值的关键字是return，存在函数中</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">buyCar</span>():<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;奥迪&#x27;</span><br><br><span class="hljs-comment"># 使用一个变量来接受函数的返回值</span><br>car = buyCar()<br><span class="hljs-built_in">print</span>(car) <span class="hljs-comment"># 奥迪</span><br></code></pre></td></tr></table></figure><h4 id="案例练习"><a href="#案例练习" class="headerlink" title="案例练习"></a>案例练习</h4><h1 id="定义一个函数-然后让函数计算两个数值-并且返回这个计算之后的结果"><a href="#定义一个函数-然后让函数计算两个数值-并且返回这个计算之后的结果" class="headerlink" title="定义一个函数 然后让函数计算两个数值 并且返回这个计算之后的结果"></a>定义一个函数 然后让函数计算两个数值 并且返回这个计算之后的结果</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">addsum</span>(<span class="hljs-params">a,b</span>):<br>  c = a + b<br>  <span class="hljs-keyword">return</span> <br>asum = addsum(<span class="hljs-number">123</span>,<span class="hljs-number">456</span>)<br><span class="hljs-built_in">print</span>(asum) <span class="hljs-comment"># 579</span><br></code></pre></td></tr></table></figure><h3 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h3><ul><li>局部变量：在函数的内部定义的变量 我们称之为局部变量</li></ul><h1 id="特点-：其作用域范围是函数内部-而函数的外部是不可以使用的"><a href="#特点-：其作用域范围是函数内部-而函数的外部是不可以使用的" class="headerlink" title="特点 ：其作用域范围是函数内部 而函数的外部是不可以使用的"></a>特点 ：其作用域范围是函数内部 而函数的外部是不可以使用的</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>  a = <span class="hljs-number">1</span><br>  <span class="hljs-built_in">print</span>(a)<br>f1()<br><span class="hljs-comment"># 函数里面有a 但是外面没有a 所以说函数的外部是不可以使用的</span><br>ptint(a) <span class="hljs-comment"># NameError: name &#x27;a&#x27; is not defined</span><br></code></pre></td></tr></table></figure><ul><li>全局变量定义在函数外部的变量 我们称之为全局变量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span> <span class="hljs-comment"># 外部定义的变量  全局变量</span><br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>  <span class="hljs-built_in">print</span>(a)<br>f1() <span class="hljs-comment"># 1</span><br><span class="hljs-comment"># 在满足条件的情况下 要使用作用域最小的那个变量范围</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫-数据类型高级</title>
    <link href="/2022/10/10/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%AB%98%E7%BA%A7/"/>
    <url>/2022/10/10/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型高级"><a href="#数据类型高级" class="headerlink" title="数据类型高级"></a>数据类型高级</h1><h3 id="字符串高级"><a href="#字符串高级" class="headerlink" title="字符串高级"></a>字符串高级</h3><p><strong>字符串的常见操作包括：</strong></p><ul><li><p>获取长度-len-len函数可以获取字符串的长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br></code></pre></td></tr></table></figure></li><li><p>查找内容-find-查找指定内容在字符串中是否存在，如果存在就返回该内容在字符串中第一次出现的开始位置的索引值，如果不存在，则返回-1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a1 = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-built_in">print</span>(a1.find(<span class="hljs-string">&#x27;e&#x27;</span>)) <span class="hljs-comment"># //1    print(a1.find(&#x27;p&#x27;)) // -1</span><br></code></pre></td></tr></table></figure></li><li><p>判断-startswith,endswith-判断字符串是不是以谁谁谁开头&#x2F;结尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a2 = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-built_in">print</span>(a2.startswith(<span class="hljs-string">&#x27;h&#x27;</span>)) <span class="hljs-comment"># True 否则返回False</span><br><span class="hljs-built_in">print</span>(a2.endswith(<span class="hljs-string">&#x27;o&#x27;</span>)) <span class="hljs-comment"># True 否则返回False</span><br></code></pre></td></tr></table></figure></li><li><p>计算出现次数-count-返回str在start和end之间 在mystr里面出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a3 = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-built_in">print</span>(a3.count(<span class="hljs-string">&#x27;l&#x27;</span>)) <span class="hljs-comment"># 两次</span><br></code></pre></td></tr></table></figure></li><li><p>替换内容-replace-替换字符串中指定的内容，如果指定次数count，则替换不会超过count</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a4 = <span class="hljs-string">&#x27;xxddd&#x27;</span><br><span class="hljs-built_in">print</span>(a4.replace(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>)) <span class="hljs-comment"># nnddd</span><br></code></pre></td></tr></table></figure></li><li><p>切割字符串-split-通过参数的内容切割字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a5 = <span class="hljs-string">&#x27;1@2@3@4&#x27;</span><br><span class="hljs-built_in">print</span>(a5.split(<span class="hljs-string">&#x27;@&#x27;</span>)) <span class="hljs-comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span><br></code></pre></td></tr></table></figure></li><li><p>修改大小写-upper，lower-将字符串中的大小写互相转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a6 = <span class="hljs-string">&#x27;hElLo&#x27;</span><br><span class="hljs-built_in">print</span>(a6.upper()) <span class="hljs-comment"># 将所有的小写字母变成大写字母 HELLO</span><br><span class="hljs-built_in">print</span>(a6.lower()) <span class="hljs-comment"># 将所有的大写字母变成小写字母 hello</span><br></code></pre></td></tr></table></figure></li><li><p>空格处理-strip-去空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a7 = <span class="hljs-string">&#x27;   a   &#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a7)) <span class="hljs-comment"># 7</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a7.strip())) <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure></li><li><p>字符串拼接-join-字符串拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a8 = <span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-built_in">print</span>(a8.join(<span class="hljs-string">&#x27;hello&#x27;</span>)) <span class="hljs-comment"># haealalao</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="列表高级（列表的增删改查）"><a href="#列表高级（列表的增删改查）" class="headerlink" title="列表高级（列表的增删改查）"></a>列表高级（列表的增删改查）</h3><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><ul><li><p>append-在末尾添加元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">str_list = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br>str_list.append(<span class="hljs-string">&#x27;d&#x27;</span>) <span class="hljs-comment"># 将d加入到列表最后</span><br><span class="hljs-built_in">print</span>(str_list) <span class="hljs-comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br></code></pre></td></tr></table></figure></li><li><p>insert 在指定位置插入元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">num_list = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>]<br>num_list.insert(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;2&#x27;</span>) <span class="hljs-comment"># 在下标为1的地方插入‘2’</span><br><span class="hljs-built_in">print</span>(num_list) <span class="hljs-comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span><br></code></pre></td></tr></table></figure></li><li><p>extend-合并两个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">sec_list = [<span class="hljs-string">&#x27;web&#x27;</span>,<span class="hljs-string">&#x27;pwn&#x27;</span>,<span class="hljs-string">&#x27;md5&#x27;</span>]<br>sec1_list = [<span class="hljs-string">&#x27;ctf&#x27;</span>,<span class="hljs-string">&#x27;hw&#x27;</span>,<span class="hljs-string">&#x27;zb&#x27;</span>]<br>sec_list.extend(sec1_list) <span class="hljs-comment"># 将sec_list的数据一个一个加入到列表sec_list后面</span><br><span class="hljs-built_in">print</span>(sec_list) <span class="hljs-comment"># [&#x27;web&#x27;, &#x27;pwn&#x27;, &#x27;md5&#x27;, &#x27;ctf&#x27;, &#x27;hw&#x27;, &#x27;zb&#x27;]</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h4><ul><li>通过指定下标来访问列表元素，修改列表时，为列表的下标赋值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">city_list = [<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-string">&#x27;天津&#x27;</span>，<span class="hljs-string">&#x27;石家庄&#x27;</span>,<span class="hljs-string">&#x27;济南&#x27;</span>]<br><span class="hljs-comment"># 将列表中的元素值修改</span><br><span class="hljs-comment"># 可以通过修改下标</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><ul><li>所谓查找，就是看指定元素是否存在<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># in 是否在列表中</span><br>num0_list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-comment"># 判断一下在控制台输入的那个数据是否在列表中</span><br>num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入你想要的数字&#x27;</span>))<br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">in</span> num0_list :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;在&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;不在&#x27;</span>)<br><span class="hljs-comment"># not in 是否不在列表中</span><br>game_list=[<span class="hljs-string">&#x27;gta5&#x27;</span>,<span class="hljs-string">&#x27;pbug&#x27;</span>]<br><span class="hljs-comment"># 在控制台输入游戏，然后判断是否不在</span><br>game = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入游戏&#x27;</span>)<br><span class="hljs-keyword">if</span> game <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> game_list :<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;不在&#x27;</span>)<br><span class="hljs-keyword">else</span> :<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;在&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p><strong>列表中常用的删除方法有</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># del 根据下标来删除</span><br>q_list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-keyword">del</span> q_list[<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(q_list) <span class="hljs-comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span><br><span class="hljs-comment">#  pop 删除最后一个元素</span><br>w_list = [<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>]<br>w_list.pop()<br><span class="hljs-built_in">print</span>(w_list) <span class="hljs-comment"># [&#x27;2&#x27;, &#x27;4&#x27;, &#x27;6&#x27;]</span><br><span class="hljs-comment"># remove 删除指定元素的值</span><br>e_list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>e_list.remove(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(e_list) <span class="hljs-comment"># [1, 2, 4]</span><br></code></pre></td></tr></table></figure><h3 id="元组高级"><a href="#元组高级" class="headerlink" title="元组高级"></a>元组高级</h3><p><strong>Python的元组与列表类似，不同之处在于-元组的元素不能修改-，元组使用小括号，列表使用方括号</strong></p><h4 id="访问元组"><a href="#访问元组" class="headerlink" title="访问元组"></a>访问元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a_tuple = (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(a_tuple[<span class="hljs-number">2</span>]) <span class="hljs-comment"># 4</span><br><span class="hljs-built_in">print</span>(a_tuple) <span class="hljs-comment"># (2,3,4,5)</span><br></code></pre></td></tr></table></figure><h4 id="修改元组-不可以被修改"><a href="#修改元组-不可以被修改" class="headerlink" title="修改元组(不可以被修改)"></a>修改元组(不可以被修改)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">b_tuple = (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment"># 修改 会报错</span><br>b_tuple[<span class="hljs-number">2</span>] = <span class="hljs-number">5</span> <span class="hljs-comment"># TypeError: &#x27;tuple&#x27; object does not support item assignment</span><br><span class="hljs-built_in">print</span>(b_tuple)<br></code></pre></td></tr></table></figure><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">c_tuple = (<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(c_tuple)) <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br><span class="hljs-comment"># 只有一个数组后面需要加逗号</span><br>d_tuple = (<span class="hljs-number">2</span>,)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(d_tuple)) <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><ul><li>切片是指对操作的对象截取其中一部分的操作。<strong>字符串，列表，元组</strong>都支持切片操作</li><li>切片语法：[起始：结束：步长]，也可以简化是使用[起始：结束]</li><li>注意：选取的区间是从“起始位置“开始到前一个结束的位置<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在切片中直接写下标来访问元素</span><br>b = <span class="hljs-string">&#x27;china&#x27;</span><br><span class="hljs-built_in">print</span>(b[<span class="hljs-number">3</span>]) <span class="hljs-comment"># n</span><br><span class="hljs-comment"># 左闭右开区间 包含坐标左边的数据，不包含右边的数据</span><br><span class="hljs-built_in">print</span>(b[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>]) <span class="hljs-comment"># chin</span><br><span class="hljs-comment"># 从起始值开始 一直到最后</span><br><span class="hljs-built_in">print</span>(b[<span class="hljs-number">1</span>:]) <span class="hljs-comment"># hina</span><br><span class="hljs-comment"># 从下标为0的索引的元素开始 一直到第二个参数为止 遵循左闭右开区间</span><br><span class="hljs-built_in">print</span>(b[:<span class="hljs-number">3</span>]) <span class="hljs-comment"># chi</span><br><span class="hljs-comment"># 从下标为0的位置的开始，到下标为3的位置结束 ，每次增加2个长度</span><br><span class="hljs-built_in">print</span>(b[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>:<span class="hljs-number">2</span>]) <span class="hljs-comment"># ci</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="字典的高级"><a href="#字典的高级" class="headerlink" title="字典的高级"></a>字典的高级</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">china = &#123;<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;sjz&#x27;</span>,<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;jinan&#x27;</span>&#125;<br><span class="hljs-comment"># 查询方法一</span><br><span class="hljs-built_in">print</span>(china[<span class="hljs-string">&#x27;hebei&#x27;</span>]) <span class="hljs-comment"># sjz</span><br><span class="hljs-comment"># 使用[]方法 获取不存在的key的时候 会报错  KeyError: &#x27;ss&#x27;</span><br><span class="hljs-built_in">print</span>(china[<span class="hljs-string">&#x27;ss&#x27;</span>])<br><span class="hljs-comment"># 查询方法二</span><br><span class="hljs-built_in">print</span>(china.get(<span class="hljs-string">&#x27;shandong&#x27;</span>)) <span class="hljs-comment"># jinan</span><br><span class="hljs-comment"># 使用get方法时候 获取不存在的 会返回None</span><br><span class="hljs-built_in">print</span>(china.get(<span class="hljs-string">&#x27;sd&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><span class="hljs-comment"># 修改之前</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment">#&#123;&#x27;shandong&#x27;: &#x27;qingdao&#x27;, &#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;&#125;</span><br><span class="hljs-comment"># 修改 shandong的值</span><br>city[<span class="hljs-string">&#x27;shandong&#x27;</span>] = <span class="hljs-string">&#x27;jinan&#x27;</span><br><span class="hljs-comment">#修改之后</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#x27;shandong&#x27;: &#x27;jinan&#x27;, &#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><span class="hljs-comment"># 添加前</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;&#125;</span><br><span class="hljs-comment"># 给字典添加一个 key value</span><br><span class="hljs-comment"># 如果使用变量的名字[&#x27;键&#x27;] = 数据时 这个键如果在字典中不存在 那么就会变成新增元素</span><br>city[<span class="hljs-string">&#x27;shandong&#x27;</span>] = <span class="hljs-string">&#x27;jinan&#x27;</span><br><span class="hljs-built_in">print</span>(city)  <span class="hljs-comment"># &#123;&#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;, &#x27;shandong&#x27;: &#x27;jinan&#x27;&#125;</span><br><span class="hljs-comment"># 如果这个键在字典中存在 那么就会变成修改元素</span><br>city[<span class="hljs-string">&#x27;hebei&#x27;</span>] = <span class="hljs-string">&#x27;tangshan&#x27;</span> <br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#x27;hebei&#x27;: &#x27;tangshan&#x27;, &#x27;shandong&#x27;: &#x27;jinan&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><h5 id="del"><a href="#del" class="headerlink" title="del"></a>del</h5><ul><li>删除字典中指定的某一个元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><span class="hljs-comment"># 删除前</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#x27;shandong&#x27;: &#x27;qingdao&#x27;, &#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;&#125;</span><br><span class="hljs-comment"># 删除元素</span><br><span class="hljs-keyword">del</span> city[<span class="hljs-string">&#x27;shandong&#x27;</span>]<br><span class="hljs-comment"># 删除之后</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;&#125;</span><br></code></pre></td></tr></table></figure></li><li>删除整个字典<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><span class="hljs-comment"># 删除前</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#x27;shandong&#x27;: &#x27;qingdao&#x27;, &#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;&#125;</span><br><span class="hljs-comment"># 删除整个字典</span><br><span class="hljs-keyword">del</span> city<br><span class="hljs-comment"># 删除之后</span><br><span class="hljs-built_in">print</span>(city)  <span class="hljs-comment"># NameError: name &#x27;city&#x27; is not defined</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h5><ul><li>清空字典 但是保留字典对象<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 清空指的是将字典中所有的数据 都删除掉 保留字典的结构</span><br>city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><span class="hljs-comment"># 删除前</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#x27;shandong&#x27;: &#x27;qingdao&#x27;, &#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;&#125;</span><br><span class="hljs-comment"># 清空字典</span><br>city.clear()<br><span class="hljs-comment"># 删除后</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><h5 id="遍历就是一个一个输出"><a href="#遍历就是一个一个输出" class="headerlink" title="遍历就是一个一个输出"></a>遍历就是一个一个输出</h5><ul><li>遍历字典中的key<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><span class="hljs-comment"># 字典.keys()方法 获取字典中的所有的key值 key是一个变量的名字 可以随便写</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> city.keys():<br>  <span class="hljs-built_in">print</span>(key) <span class="hljs-comment"># shandong  hebei</span><br></code></pre></td></tr></table></figure></li><li>遍历字典中的value<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><span class="hljs-comment"># 字典.values() 获取字典中的所有的value值 value是一个变量的名字 可以随便写</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> city.values() :<br>  <span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure></li><li>遍历字典的value和key<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> city.items() :<br>  <span class="hljs-built_in">print</span>(key,value) <span class="hljs-comment">#shandong qingdao hebei shijiazhuang</span><br></code></pre></td></tr></table></figure></li><li>遍历字典的项&#x2F;元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> city.items() :<br>  <span class="hljs-built_in">print</span>(item) <span class="hljs-comment">#(&#x27;shandong&#x27;, &#x27;qingdao&#x27;) (&#x27;hebei&#x27;, &#x27;shijiazhuang&#x27;)</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域环境搭建</title>
    <link href="/2022/10/09/%E5%9F%9F%E6%8E%A7%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/10/09/%E5%9F%9F%E6%8E%A7%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="域环境搭建"><a href="#域环境搭建" class="headerlink" title="域环境搭建"></a>域环境搭建</h1><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul><li>Windows Server 2016</li></ul><h3 id="一、-安装域环境"><a href="#一、-安装域环境" class="headerlink" title="一、 安装域环境"></a>一、 安装域环境</h3><ul><li><p>1.1、在开始菜单点击服务器管理器<br><img src="/../images/ykdj/1.png"></p></li><li><p>1.2、在服务器管理器中点击<strong>新建角色和功能</strong><br><img src="/../images/ykdj/2.png"></p></li><li><p>1.3、选择服务器<br><img src="/../images/ykdj/2.1.png"></p></li><li><p>1.4、一直默认下一步，到服务器角色安装的时候，选择如图<br><img src="/../images/ykdj/3.png"></p></li><li><p>如果选择dns服务器的时候出此提示，那么就去手动配置一个ip<br><img src="/../images/ykdj/4.png"><br><img src="/../images/ykdj/5.png"></p></li><li><p>选择如图，下一步就行了<br><img src="/../images/ykdj/6.png"></p></li><li><p>1.5、功能，默认就好，接着下一步<br><img src="/../images/ykdj/7.png"></p></li><li><p>1.6、一直下一步然后点安装<br><img src="/../images/ykdj/8.png"></p></li><li><p>1.7、等待就好，安装完成关闭<br><img src="/../images/ykdj/9.png"></p></li></ul><h3 id="二、-配置域"><a href="#二、-配置域" class="headerlink" title="二、 配置域"></a>二、 配置域</h3><h4 id="提升域控"><a href="#提升域控" class="headerlink" title="提升域控"></a>提升域控</h4><ul><li><p>2.1、在服务器管理器界面，如图点击<br><img src="/../images/ykdj/10.png"></p></li><li><p>2.2、选择添加新林，然后下面写域名，接着下一步<br><img src="/../images/ykdj/11.png"></p></li><li><p>2.3、域控制器选项，默认，输入密码，下一步<br><img src="/../images/ykdj/12.png"></p></li><li><p>2.4、一直默认下一步，然后到先决条件点击安装<br><img src="/../images/ykdj/13.png"><br><img src="/../images/ykdj/14.png"></p></li><li><p>2.5 重启以后查看是否为域<br><img src="/../images/ykdj/15.png"></p></li></ul><h4 id="加入域控"><a href="#加入域控" class="headerlink" title="加入域控"></a>加入域控</h4><ul><li>创建个域用户，方便另一台加入<br><img src="/../images/ykdj/15.1.png"></li><li>选择本地域名-Users-新建-用户<br><img src="/../images/ykdj/15.2.png"><br><img src="/../images/ykdj/15.3.png"></li><li>输入信息，点击确定<br><img src="/../images/ykdj/15.4.png"></li></ul><p><strong>用另一台同内网的机子，尝试加入域控</strong></p><ul><li><p>2.6、更改网络设置<br><img src="/../images/ykdj/16.1.png"></p></li><li><p>2.、选择计算机-属性<br><img src="/../images/ykdj/16.png"></p></li><li><p>2.7、更改设置<br><img src="/../images/ykdj/17.png"></p></li><li><p>2.8、选择更改<br><img src="/../images/ykdj/18.png"></p></li><li><p>2.9、输入刚才的创建的域名，点击确定<br><img src="/../images/ykdj/19.png"></p></li><li><p>2.10、输入刚才新建的用户名和密码，尝试加入域<br><img src="/../images/ykdj/20.png"></p></li></ul><p><strong>成功，重启 执行域命令</strong><br><img src="/../images/ykdj/21.png"></p><p><img src="/../images/ykdj/22.png"></p>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫-流程控制语句</title>
    <link href="/2022/08/31/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2022/08/31/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><h3 id="1、if关键字"><a href="#1、if关键字" class="headerlink" title="1、if关键字"></a>1、if关键字</h3><ul><li>if语句是用来进行判断的，格式如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 判断的条件 :<br>    代码（如果判断条件为<span class="hljs-literal">True</span>的时候执行<span class="hljs-keyword">if</span>下面的内容<br></code></pre></td></tr></table></figure><ul><li>demo_1:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">30</span><br><span class="hljs-comment">#如果你的年龄大于18 那么就是成年了</span><br><span class="hljs-keyword">if</span> age &gt; <span class="hljs-number">18</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我已经成年了&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><p>运行结果<br><code>我已经成年了</code></p></li><li><p>demo_2:</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">16</span> <br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我已经成年了&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><p>运行结果：</p><blockquote><p>无结果</p></blockquote></li><li><p>if 案例联系</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在控制台输入一个年龄 如果年龄大于18了 那么打印可以去网吧了</span><br><br><span class="hljs-comment"># input 返回的是字符串类型</span><br>age = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的年龄&quot;</span>)<br><span class="hljs-keyword">if</span> age &gt; <span class="hljs-number">18</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;您成年了“)</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 案例中考察了三个知识点</span><br><span class="hljs-string"># （1）控制台输入</span><br><span class="hljs-string"># （2）强制类型转换</span><br><span class="hljs-string"># （3） int和str是不能比较的</span><br></code></pre></td></tr></table></figure><h3 id="2、ifelse关键字"><a href="#2、ifelse关键字" class="headerlink" title="2、ifelse关键字"></a>2、ifelse关键字</h3><ul><li><p>ifelse 语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 判断条件:<br>    判断条件为<span class="hljs-literal">True</span>的时候执行的代码<br><span class="hljs-keyword">else</span> :<br>    判断条件为<span class="hljs-literal">False</span>的时候执行的代码<br><br><span class="hljs-comment">#  ifelse案例</span><br>age = <span class="hljs-number">17</span><br><span class="hljs-keyword">if</span> age &gt; <span class="hljs-number">18</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你成年了&quot;</span>)<br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你未成年&#x27;</span>)<br><span class="hljs-comment"># 输出 你未成年</span><br></code></pre></td></tr></table></figure></li><li><p>ifelse 案例练习</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在控制台输入一个年龄 如果年龄大于18了 那么输出 你已经成年了</span><br><span class="hljs-comment"># 否则那么输出 你还没有成年</span><br>age = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的年龄&quot;</span>) <span class="hljs-comment"># int(input(&quot;请输入你的年龄&quot;))</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(age) &gt; <span class="hljs-number">18</span> :   <span class="hljs-comment"># age &gt; 18 :</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你成年了&quot;</span>)<br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你未成年&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="3、elif关键字"><a href="#3、elif关键字" class="headerlink" title="3、elif关键字"></a>3、elif关键字</h3><ul><li>案例练习</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在控制台上输入您的成绩分数</span><br><span class="hljs-comment"># 如果你考了90以上，成绩为优秀</span><br><span class="hljs-comment"># 如果你考了80以上，成绩为良好</span><br><span class="hljs-comment"># 如果你考了70以上，成绩为中等</span><br><span class="hljs-comment"># 如果你考了60以上，成绩为合格</span><br><span class="hljs-comment"># 否则，成绩为不合格</span><br>score = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的成绩:&quot;</span>))<br><span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">90</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;优秀&quot;</span>)<br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">80</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;良好&quot;</span>)<br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">70</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;中等&quot;</span>)<br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">60</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;合格&quot;</span>)<br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不合格&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="4、for循环"><a href="#4、for循环" class="headerlink" title="4、for循环"></a>4、for循环</h3><ul><li><p>for 循环格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 要遍历的数据：<br>        方法体<br></code></pre></td></tr></table></figure></li><li><p>掌握五个点</p><ul><li>循环字符串</li><li>range(5)</li><li>range(1,6)</li><li>range(1,10,3)</li><li>循环一个列表</li></ul></li></ul><p><strong>循环字符串</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一个一个的输出 叫做循环 也叫做遍历</span><br>s = <span class="hljs-string">&quot;china&quot;</span><br><span class="hljs-comment"># for 最好用的一个循环</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s :<br><span class="hljs-comment"># i 是字符串中一个又一个的字符的变量</span><br><span class="hljs-comment"># s 代表的是要遍历的数据</span><br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p><strong>range(5)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># range方法的结果 一个可遍历的对象</span><br><span class="hljs-comment"># range(5) 0-4 左闭右开区间 （0，5）</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>) :<br>    <span class="hljs-built_in">print</span>(i)  <span class="hljs-comment"># 0,1,2,3,4</span><br></code></pre></td></tr></table></figure><p><strong>range(1,6)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># range(起始值，结束值)  eg：range(1,6)</span><br><span class="hljs-comment"># 左闭右开 1-5</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>):<br>    <span class="hljs-built_in">print</span>(i) <span class="hljs-comment"># 1,2,3,4,5</span><br></code></pre></td></tr></table></figure><p><strong>range(1,0,3)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(i) <span class="hljs-comment"># 1,4,7</span><br><br><span class="hljs-comment"># range(起始值,结束值,步长)</span><br><span class="hljs-comment"># 左闭右开区间</span><br><span class="hljs-comment">#  1-9 每隔三个数输出一个</span><br></code></pre></td></tr></table></figure><p><strong>循环一个列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 应用场景  会爬去一个列表返回给我们 需要将这些列表一个一个的遍历</span><br><br><span class="hljs-comment"># 循环一个列表</span><br><br>a_list = [<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;test1&quot;</span>,<span class="hljs-string">&quot;test2&quot;</span>]<br><span class="hljs-comment"># 遍历列表中的元素</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a_list :<br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-comment"># len() 的用法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a_list)) <span class="hljs-comment"># 判断列表中的元素的个数</span><br><br><span class="hljs-comment"># 遍历列表中的下标</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a_list)):<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫-运算符与输入输出</title>
    <link href="/2022/08/30/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2022/08/30/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="1、算数运算符"><a href="#1、算数运算符" class="headerlink" title="1、算数运算符"></a>1、算数运算符</h3><ul><li>下面以a&#x3D;10,b&#x3D;20为例进行计算<table><thead><tr><th><strong>运算符</strong></th><th><strong>描述</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>+</td><td>加</td><td>两个对象相加a+b输出结果30</td></tr><tr><td>-</td><td>减</td><td>得到负数或是一个数减去另一个数a-b输出结果-10</td></tr><tr><td>*</td><td>乘</td><td>两个数相乘或是返回一个被重复若干次的字符串a*b输出结果200</td></tr><tr><td>&#x2F;</td><td>除</td><td>b&#x2F;a输出结果2</td></tr><tr><td>&#x2F;&#x2F;</td><td>取整数</td><td>返回商的整数部分9&#x2F;&#x2F;2输出结果4，9.0&#x2F;&#x2F;2.0输出结果4.0</td></tr><tr><td>%</td><td>取余</td><td>返回除法的余数b%a输出结果0</td></tr><tr><td>**</td><td>指数</td><td>a**b为10的20次方</td></tr><tr><td>()</td><td>小括号</td><td>提高运算优先级，比如：（1+2）*3</td></tr></tbody></table></li></ul><ul><li><p>注意</p><blockquote><p>混合运算时优先级顺序为：<code>**</code>高于<code>* / % //</code>高于<code>+ -</code>,为了避免歧义，建议用()来处理运算优先级。并且，不同类型的数字在进行混合运算时，整数将会转换成浮点数进行运算。</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">3</span><br>b = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(a + b) <span class="hljs-comment"># 5</span><br><span class="hljs-built_in">print</span>(a - b) <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(a * b) <span class="hljs-comment"># 6</span><br><span class="hljs-built_in">print</span>(a / b) <span class="hljs-comment"># 1.5</span><br><span class="hljs-comment"># 取整</span><br><span class="hljs-built_in">print</span>(a // b) <span class="hljs-comment"># 1 </span><br><span class="hljs-comment"># 取余</span><br><span class="hljs-built_in">print</span>(a % b) <span class="hljs-comment"># 1</span><br><span class="hljs-comment"># 指数 幂</span><br><span class="hljs-built_in">print</span>(a ** b) <span class="hljs-comment"># 9</span><br></code></pre></td></tr></table></figure><ul><li>扩展<ul><li>字符串的加法 是拼接的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;123&#x27;</span><br>b = <span class="hljs-string">&#x27;456&#x27;</span><br><span class="hljs-built_in">print</span>(a + b) <span class="hljs-comment"># 123456</span><br></code></pre></td></tr></table></figure></li><li>在python中 + 两端都是字符串才可以进行加法运算<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;123&#x27;</span><br>b = <span class="hljs-number">456</span><br><span class="hljs-built_in">print</span>(a+<span class="hljs-built_in">str</span>(b)) <span class="hljs-comment"># 123456</span><br></code></pre></td></tr></table></figure></li><li>字符串的乘法 是将字符串重复多少次<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;test&#x27;</span><br><span class="hljs-built_in">print</span>(a * <span class="hljs-number">3</span>) <span class="hljs-comment"># testtesttest</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2、赋值运算符"><a href="#2、赋值运算符" class="headerlink" title="2、赋值运算符"></a>2、赋值运算符</h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>描述</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值运算符</td><td>把&#x3D;号右边的结果 赋给左边的变量，如num &#x3D; 1 + 2 * 3，结果num的值为7.</td></tr></tbody></table><ul><li>例子</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 单个变量赋值</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num = <span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num<br><span class="hljs-number">10</span><br><br><span class="hljs-comment"># 同时为多个变量赋值（使用等号连接）</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = b = <span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b<br><span class="hljs-number">4</span><br>&gt;&gt;&gt;<br><br><span class="hljs-comment"># 多个变量赋值（使用逗号分隔）</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num1,f1,str1 = <span class="hljs-number">100</span>,<span class="hljs-number">3.14</span>,<span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num1<br><span class="hljs-number">100</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>f1 <br><span class="hljs-number">3.14</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>str1<br>hello<br></code></pre></td></tr></table></figure><h3 id="3、复合赋值运算符"><a href="#3、复合赋值运算符" class="headerlink" title="3、复合赋值运算符"></a>3、复合赋值运算符</h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>描述</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>+&#x3D;</td><td>加法赋值运算符</td><td>c +&#x3D; a 等效于c &#x3D;  c + a</td></tr><tr><td>-&#x3D;</td><td>减法赋值运算符</td><td>c -&#x3D; a 等效于c &#x3D;  c - a</td></tr><tr><td>*&#x3D;</td><td>乘法赋值运算符</td><td>c *&#x3D; a 等效于c &#x3D;  c * a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值运算符</td><td>c &#x2F;&#x3D; a 等效于c &#x3D;  c &#x2F; a</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>取整赋值运算符</td><td>c &#x2F;&#x2F;&#x3D; a 等效于c &#x3D;  c &#x2F;&#x2F; a</td></tr><tr><td>%&#x3D;</td><td>取模赋值运算符</td><td>c %&#x3D; a 等效于c &#x3D;  c % a</td></tr><tr><td>**&#x3D;</td><td>幂赋值运算符</td><td>c **&#x3D; a 等效于c &#x3D;  c ** a</td></tr></tbody></table><ul><li>例子<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">100</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a += <span class="hljs-number">1</span> <span class="hljs-comment"># 相当于执行了 a = a + 1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">101</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">100</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a -= <span class="hljs-number">1</span> <span class="hljs-comment"># 相当于执行了 a = a - 1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">99</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">100</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a *= <span class="hljs-number">1</span> <span class="hljs-comment"># 相当于 a = a * 1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">100</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">100</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a /= <span class="hljs-number">1</span> <span class="hljs-comment"># 相当于 a = a / 1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">100</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">11</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a //= <span class="hljs-number">2</span> <span class="hljs-comment"># 相当于 a = a // 2 (整除)</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">5</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">11</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a %= <span class="hljs-number">2</span> <span class="hljs-comment"># 相当于 a = a % 2 (取余，取模，模余)</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">1</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">11</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a **= <span class="hljs-number">2</span> <span class="hljs-comment"># 相当于 a = a ** 2 (幂)</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">121</span><br></code></pre></td></tr></table></figure></li></ul><ul><li>总结<blockquote><p>+&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; %&#x3D; **&#x3D;<br>+&#x3D; 最常用</p></blockquote></li></ul><h3 id="4、比较运算符"><a href="#4、比较运算符" class="headerlink" title="4、比较运算符"></a>4、比较运算符</h3><ul><li>以下假设变量a为10，变量b为20:</li></ul><table><thead><tr><th><strong>运算符</strong></th><th><strong>描述</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于：比较对象是否相等</td><td>(a&#x3D;&#x3D;b)返回 False</td></tr><tr><td>!&#x3D;</td><td>不等于：比较两个对象是否不相等</td><td>(a !&#x3D; b) 返回True</td></tr><tr><td>&gt;</td><td>大于：返回x是否大于y</td><td>(a&gt;b)返回 False</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于：返回x是否大于等于y</td><td>(a&gt;&#x3D;b)返回 False</td></tr><tr><td>&lt;</td><td>小于：返回x是否小于y</td><td>(a&lt;b) 返回True</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于：返回x是否小于等于y</td><td>(a&lt;&#x3D;b) 返回True</td></tr></tbody></table><ul><li>代码实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 比较运算符返回的都是boolean类型的数据</span><br><br><span class="hljs-comment"># == 恒等  判断 == 两边的变量是否是一致</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a == b) <span class="hljs-comment">#  True</span><br><br><span class="hljs-comment"># != 不等 判断 != 两边的变量是否不一致</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a != b) <span class="hljs-comment"># False</span><br><span class="hljs-comment"># 扩展： &lt;&gt;这个不等是python2 版本使用的 python3 被遗弃了 不支持了</span><br><br><span class="hljs-comment"># &gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># &gt;= 大于等于</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt;= <span class="hljs-number">10</span>) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt;= <span class="hljs-number">5</span>) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt;= <span class="hljs-number">20</span>) <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># &lt; 小于</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &lt; <span class="hljs-number">20</span>) <span class="hljs-comment">#True</span><br><br><span class="hljs-comment"># &lt;= 小于等于</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &lt;= <span class="hljs-number">10</span>) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">20</span> &lt;= <span class="hljs-number">10</span>) <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><h3 id="5、逻辑运算符"><a href="#5、逻辑运算符" class="headerlink" title="5、逻辑运算符"></a>5、逻辑运算符</h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>逻辑表达式</strong></th><th><strong>描述</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>只要有一个运算数是False，结果就是False；<br />只有所有的运算数都为True时，结果才是True；<br />做取值运算时，取第一个为False的值；如果所有的值都为False，则取最后一个值</td><td>True and True and False 结果为False；<br />True and True and True 结果为True<br /></td></tr><tr><td>or</td><td>x or y</td><td>只要有一个运算数是True，结果就是True；<br />只有所有的运算数都为False时，结果才是False；<br />做取值运算时，取第一个为True的值，如果值都为False，取最后一个值</td><td>False or False or True  结果为True；<br />False or False or False 结果为False；<br /></td></tr><tr><td>not</td><td>not x</td><td>布尔 “非”  如果x为True 则返回False；如果x为False，则返回True。</td><td>not True &gt;False；<br />not False &gt;True<br /></td></tr></tbody></table><ul><li>代码实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 逻辑运算符 and（与） or（或） not （非）</span><br><br><span class="hljs-comment"># and 与</span><br><span class="hljs-comment"># and 两边的数据 必须全部都是True的时候 才会返回True 只要一端返回的是False  那么就返回False</span><br><span class="hljs-comment"># and 两边都是False的时候 返回的是False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span> &gt; <span class="hljs-number">11</span>)<br><span class="hljs-comment"># and 一边是False，一边是True的时候 返回的是False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span> &gt; <span class="hljs-number">11</span>)<br><span class="hljs-comment"># and 两边返回的都是True则返回的是True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span> &gt; <span class="hljs-number">4</span>)<br><br><span class="hljs-comment"># or 或者</span><br><span class="hljs-comment"># or 的两端都是False 则返回的是False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span> &gt; <span class="hljs-number">11</span>)<br><span class="hljs-comment"># or 的两端 前面的一端为True 后面的一端为False 则返回的是True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span> &gt; <span class="hljs-number">11</span>)<br><span class="hljs-comment"># or 的两端 前面的一端为False 后面的一端为True 则返回的是True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span> &gt; <span class="hljs-number">1</span>)<br><span class="hljs-comment"># or 的两端都是True 则返回的是True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span> &gt; <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># not 非 取反</span><br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> <span class="hljs-literal">True</span>) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> <span class="hljs-literal">False</span>) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> (<span class="hljs-number">10</span> &gt; <span class="hljs-number">30</span>)) <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><ul><li>逻辑运算符的性能优化<ul><li><p>实例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># and 的性能优化</span><br>a = <span class="hljs-number">36</span><br>a &gt; <span class="hljs-number">10</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello word&quot;</span>) <span class="hljs-comment">#  输出 hello word</span><br><span class="hljs-comment"># and的性能优化 当and 前面的结果是False的情况下 那么后面的代码就不再执行了</span><br>a &lt; <span class="hljs-number">10</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello word&quot;</span>) <span class="hljs-comment"># 不输出</span><br><br><span class="hljs-comment"># or 的性能优化</span><br><span class="hljs-comment"># or 只要一方为True 那么结果就是True</span><br>a = <span class="hljs-number">38</span> <br>a &gt; <span class="hljs-number">39</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello word&#x27;</span>) <span class="hljs-comment"># 输出 hello word</span><br><span class="hljs-comment"># 前面为True了 后面就不做判断了</span><br>a &gt; <span class="hljs-number">37</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello word&#x27;</span>) <span class="hljs-comment"># 不会执行hello word</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="1、输出"><a href="#1、输出" class="headerlink" title="1、输出"></a>1、输出</h3><ul><li>普通输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;一个代码狗&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>格式化输出<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># scrapy框架的时候 excel文件 mysql redis</span><br>age = <span class="hljs-number">18</span><br>name= <span class="hljs-string">&quot;test&quot;</span><br><br><span class="hljs-comment"># %s代表的是 字符串 %d代表的是数值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我的名字是%s,我的年龄是%d&quot;</span> % (name,age)) <span class="hljs-comment"># 我的名字是test，我的年龄是18</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2、输入"><a href="#2、输入" class="headerlink" title="2、输入"></a>2、输入</h3><ul><li>代码实例</li></ul><pre><code class="python">password = input(&quot;请输入您的密码&quot;)print(&quot;我的密码是%s&quot; % password)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫-类型转换</title>
    <link href="/2022/08/29/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>/2022/08/29/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>int(x)</td><td>将x转换为一个整数</td></tr><tr><td>float(x)</td><td>将x转换为一个浮点数</td></tr><tr><td>str(x)</td><td>将x转换为一个字符串</td></tr><tr><td>bool(x)</td><td>将x转换为一个布尔值</td></tr></tbody></table><h3 id="转换为整数"><a href="#转换为整数" class="headerlink" title="转换为整数"></a>转换为整数</h3><ul><li>注意<ul><li>123.456和12ab字符串都包含非法字符，不能转换成整数，会报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># str --&gt; int</span><br>a = <span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;123&quot;</span>)) <span class="hljs-comment"># 123 将字符串转换成为整数</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-number">123.78</span>)) <span class="hljs-comment"># 123 将浮点数转换成为整数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-literal">True</span>)) <span class="hljs-comment"># 1 布尔值True转换成为整数是1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-literal">False</span>)) <span class="hljs-comment"># 0 布尔值False转换成为整数是0</span><br></code></pre></td></tr></table></figure><h3 id="转换浮点数"><a href="#转换浮点数" class="headerlink" title="转换浮点数"></a>转换浮点数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">f1 = <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;12.34&quot;</span>)<br><span class="hljs-built_in">print</span>(f1) <span class="hljs-comment"># 12.34</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(f1)) <span class="hljs-comment"># float 将字符串的“12.34”转换成浮点数12.34</span><br><br>f2 = <span class="hljs-built_in">float</span>(<span class="hljs-number">23</span>)<br><span class="hljs-built_in">print</span>(f2) <span class="hljs-comment"># 23.0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(f2)) <span class="hljs-comment"># float 将整数转换成为了浮点数</span><br></code></pre></td></tr></table></figure><h3 id="转换字符串"><a href="#转换字符串" class="headerlink" title="转换字符串"></a>转换字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-built_in">str</span>(<span class="hljs-number">45</span>)<br>str2 = <span class="hljs-built_in">str</span>(<span class="hljs-number">34.56</span>)<br>str3 = <span class="hljs-built_in">str</span>(<span class="hljs-literal">True</span>) <span class="hljs-comment"># True（str）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(str1),<span class="hljs-built_in">type</span>(str2),<span class="hljs-built_in">type</span>(str3))<br><br><span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt; &lt;class &#x27;str&#x27;&gt; &lt;class &#x27;str&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="转换成布尔值"><a href="#转换成布尔值" class="headerlink" title="转换成布尔值"></a>转换成布尔值</h3><ul><li>注意<ul><li>如果对非0的整数进行bool类型的转换 那么就全部是True；在整数范围内 0强制转换为bool类型的结果是False；</li><li>将浮点数转换为bool类型的数据时候 正的浮点数和负的浮点数的结果都是True；  如果是0.0 则是False；</li><li>只要字符串有内容，那么强制类型转换为bool的时候，那么就返回True；空格也是True 留空是False；</li><li>只要列表中有数据，那么强制转换为bool的时候，就返回True；无数据 则返回False；</li><li>只要元组中有数据，那么强制转换为bool的时候，就返回Ture；无数据 则返回False；</li><li>只要字典中有内容，那么强制转换为bool的时候，就返回True；无数据 则返回False；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 什么情况下为False</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&#x27;&#x27;</span>)) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">0</span>)) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(&#123;&#125;)) <span class="hljs-comment"># False 字典为空</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>([])) <span class="hljs-comment"># False 列表为空</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(())) <span class="hljs-comment"># False 元组为空</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红日靶场（一）（下）</title>
    <link href="/2022/08/28/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%911%E4%B8%8B/"/>
    <url>/2022/08/28/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%911%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="红日内网靶场——红队评估-一-下"><a href="#红日内网靶场——红队评估-一-下" class="headerlink" title="红日内网靶场——红队评估(一)(下)"></a>红日内网靶场——红队评估(一)(下)</h1><h4 id="四、内网信息收集"><a href="#四、内网信息收集" class="headerlink" title="四、内网信息收集"></a>四、内网信息收集</h4><h5 id="4-1、webshell信息收集并上线CS"><a href="#4-1、webshell信息收集并上线CS" class="headerlink" title="4.1、webshell信息收集并上线CS"></a>4.1、webshell信息收集并上线CS</h5><ul><li>查看用户权限(whoami)和是否存在杀软(tasklist)</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/28.png"></p><ul><li><p>不存在杀软，尝试上线CS</p><ul><li>先选择 Packages– Windows Executable(S)</li></ul></li></ul><p> <img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/29.png"></p><ul><li>选择自己建的Listener，Output选择PWindows ExE,如果是64位的系统就钩上Use X64 payload并选择保存的位置</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/30.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/31.png"></p><ul><li>将生成的exe文件利用哥斯拉上传到服务器</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/32.png"></p><ul><li>执行该程序</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/33.png"></p><ul><li>查看CS，成功上线</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/34.png"></p><h4 id="五、利用CS进行信息收集"><a href="#五、利用CS进行信息收集" class="headerlink" title="五、利用CS进行信息收集"></a>五、利用CS进行信息收集</h4><h5 id="5-1-1、系统信息收集"><a href="#5-1-1、系统信息收集" class="headerlink" title="5.1.1、系统信息收集"></a>5.1.1、系统信息收集</h5><ul><li>查看IP信息(ipconfig &#x2F;all)<ul><li>存在域(god.org)且DC的Ip为192.52.138</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/35.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/36.png"></p><ul><li>查看工作站运行(net config Workstation)</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/37.png"></p><ul><li>显示当前域的计算机列表(net view)</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/38.png"></p><h5 id="5-1-2、主机密码收集"><a href="#5-1-2、主机密码收集" class="headerlink" title="5.1.2、主机密码收集"></a>5.1.2、主机密码收集</h5><ul><li>利用CS的logonpasswords抓取密码</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/39.png"></p><ul><li>利用CS的hashdump抓一波hash</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/47.png"></p><ul><li>所有凭据如下</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/48.png"></p><h5 id="5-1-3、内网主机收集"><a href="#5-1-3、内网主机收集" class="headerlink" title="5.1.3、内网主机收集"></a>5.1.3、内网主机收集</h5><ul><li><p>使用CS自带的端口扫描扫一波主机</p><ul><li><code>portscan 192.168.170.0-192.168.170.255 1-1025,2289,5000-600 arp 1024</code></li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/44.png"></p><ul><li>扫面出来的主机在View-Targets里面</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/46.png"></p><ul><li>结果如下</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/45.png"></p><h4 id="六、内网横向渗透"><a href="#六、内网横向渗透" class="headerlink" title="六、内网横向渗透"></a>六、内网横向渗透</h4><h5 id="6-1-1、主机提权"><a href="#6-1-1、主机提权" class="headerlink" title="6.1.1、主机提权"></a>6.1.1、主机提权</h5><ul><li>whoami &#x2F;all 发现是administrator权限</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/40.png"></p><ul><li><p>利用计划任务权限维持尝试反弹system权限</p><ul><li><code>schtasks /create /ru system /tn &quot;Microsoft\Windows\Multimedia\SystemMediaService&quot; /sc MINUTE /mo 50  /tr &quot;C:\Windows\system.exe&quot; /st 16:22 /f</code> (创建一个名为Microsoft\Windows\Multimedia\SystemMediaService, 16:22开始执行，每50分钟执行一次)</li><li><code>SCHTASKS /Run /TN &quot;Microsoft\Windows\Multimedia\SystemMediaService&quot; /f </code>(启动计划任务)</li><li>成功反弹system权限</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/41.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/42.png"></p><ul><li>删除计划任务<ul><li><code>schtasks /delete /tn &quot;Microsoft\Windows\Multimedia\SystemSoundsService&quot; /f</code>(删除计划任务)</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/43.png"></p><h5 id="6-1-2、不出网主机上线"><a href="#6-1-2、不出网主机上线" class="headerlink" title="6.1.2、不出网主机上线"></a>6.1.2、不出网主机上线</h5><ul><li><p>不出网机器上线一般有三种方式上线</p><ul><li>使用smb beacon</li><li>配置listener通过HTTP代理上线</li><li>使用pystinger搭建 socks4代理</li></ul></li><li><p>学习使用SMB beacon</p><ul><li><code>SMB Beacon使用命名管道通过父级Beacon进行通讯，当两个Beacons链接后，子Beacon从父Beacon获取到任务并发送。因为链接的Beacons使用Windows命名管道进行通信，此流量封装在SMB协议中，所以SMBbeacon相对隐蔽。SMB beacon不能直接生成可用载荷, 只能使用 PsExec 或 Stageless Payload 上线</code></li><li><code>首先得到内网中一台主机的beacon，抓取密码后进行smb喷射，得到另一台开放445端口的机器上的administrator账户密码，在目标机器不出网的情况下，可以使用Smb</code></li></ul></li><li><p>使用条件</p><ul><li>具有 SMB Beacon 的主机必须接受 445 端口上的连接</li><li>只能链接由同一个 Cobalt Strike 实例管理的 Beacon。</li><li>利用这种beacon横移必须有目标主机的管理员权限或者说是拥有具有管理员权限的凭据。</li></ul></li><li><p>使用方法</p><ul><li>1、建立smb listener</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/49.png"></p><ul><li>在cs中使用psexec进行横向移动，选择现有的beacon作为跳板，凭据必须是administrator，拥有目标主机管理员权限</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/50.png"></p><ul><li>连接成功，可以看到smb beacon上线的主机右侧有∞∞标识，如果出网主机掉线了，那么这太不出网的也会断</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/51.png"></p><ul><li>尝试利用同样方法拿下域控</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/52.png"></p><ul><li>域控已上线</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/53.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/54.png"></p><h4 id="七、小结"><a href="#七、小结" class="headerlink" title="七、小结"></a>七、小结</h4><ul><li>此次由于刚接触内网 所以只用了SMB横向，等在学习学习尝试用永恒之蓝横向</li><li>新手上路，多多指教</li></ul>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>应急响应（一）</title>
    <link href="/2022/08/27/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E5%9C%BA1/"/>
    <url>/2022/08/27/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E5%9C%BA1/</url>
    
    <content type="html"><![CDATA[<h1 id="应急响应靶场——-Win2008-WK木马"><a href="#应急响应靶场——-Win2008-WK木马" class="headerlink" title="应急响应靶场——(Win2008)WK木马"></a>应急响应靶场——(Win2008)WK木马</h1><h3 id="一、靶场出处"><a href="#一、靶场出处" class="headerlink" title="一、靶场出处"></a>一、靶场出处</h3><p>想要学习应急响应，然后就去找靶场，然后发现这位师傅有靶场环境，还有复现环境，故此学习一下。</p><ul><li><a href="https://wxiaoge.blog.csdn.net/?type=blog">https://wxiaoge.blog.csdn.net/?type=blog</a></li></ul><h3 id="二、靶场事件背景"><a href="#二、靶场事件背景" class="headerlink" title="二、靶场事件背景"></a>二、靶场事件背景</h3><ul><li><p>服务器疑似被入侵，风扇噪声很大</p></li><li><p>服务器为Windows2008，IP为192.168.226.137</p></li></ul><p><img src="/../images/yjxy-1/1.png"></p><h3 id="三、应急响应过程"><a href="#三、应急响应过程" class="headerlink" title="三、应急响应过程"></a>三、应急响应过程</h3><ul><li>一般情况下，CPU消耗很大的情况下风扇的噪声才会很大，应该是WK木马</li></ul><h4 id="3-1-排查服务器病毒程序"><a href="#3-1-排查服务器病毒程序" class="headerlink" title="3.1 排查服务器病毒程序"></a>3.1 排查服务器病毒程序</h4><h5 id="3-1-1、确认是否为WK"><a href="#3-1-1、确认是否为WK" class="headerlink" title="3.1.1、确认是否为WK"></a>3.1.1、确认是否为WK</h5><ul><li>发现服务器开了个java程序，上面带有一个外链网站</li></ul><p><img src="/../images/yjxy-1/2.png"></p><ul><li>微步在线 去查该外链URL，发现该URL为矿池</li></ul><p><img src="/../images/yjxy-1/3.png"></p><ul><li>通过查看任务管理器 发现该程序占用的 内存以及cpu使用率非常大</li></ul><p><img src="/../images/yjxy-1/4.png"></p><ul><li>右键打开该WK程序的位置，发现目录名字为wkxx<ul><li>C:\Users\Administrator\Downloads\wkbd\wkbd\javs.exe</li></ul></li></ul><p><img src="/../images/yjxy-1/5.png"></p><ul><li>通过查看config.json,发现Kuang池地址及其用户信息</li></ul><p><img src="/../images/yjxy-1/6.png"></p><ul><li>将java.exe上传到微步云沙箱，发现被标记为恶意软件</li></ul><p><img src="/../images/yjxy-1/7.png"></p><ul><li>确定是 WK程序了，在任务管理器结束掉，但是发现过一会儿该程序又运行了</li></ul><p><img src="/../images/yjxy-1/8.png"></p><p><img src="/../images/yjxy-1/9.png"></p><h5 id="3-1-2、深度排查服务器"><a href="#3-1-2、深度排查服务器" class="headerlink" title="3.1.2、深度排查服务器"></a>3.1.2、深度排查服务器</h5><ul><li>查看计划任务 taskschd.msc</li></ul><p><img src="/../images/yjxy-1/10.png"></p><ul><li>计划任务程序里面发现一个名称为system的计划任务是正在运行的</li></ul><p><img src="/../images/yjxy-1/11.png"></p><ul><li>点开该计划任务，查看操作发现是启动程序任务，并且启动程序的地址是指向WK程序的</li></ul><p><img src="/../images/yjxy-1/12.png"></p><ul><li>继续查看发现是Administrator用户在3月13号创建的计划任务</li></ul><p><img src="/../images/yjxy-1/13.png"></p><ul><li>删除该计划任务并任务管理器结束该进程和删除WK程序的目录</li></ul><p><img src="/../images/yjxy-1/14.png"></p><h4 id="3-2、排查服务器后门"><a href="#3-2、排查服务器后门" class="headerlink" title="3.2、排查服务器后门"></a>3.2、排查服务器后门</h4><h5 id="3-2-1、查看可疑进程"><a href="#3-2-1、查看可疑进程" class="headerlink" title="3.2.1、查看可疑进程"></a>3.2.1、查看可疑进程</h5><ul><li>使用利用Autoruns查看服务器是否有可疑进程<ul><li>未发现可疑进程</li></ul></li></ul><p><img src="/../images/yjxy-1/15.png"></p><h5 id="3-2-2、查看是否存在可疑的启动项"><a href="#3-2-2、查看是否存在可疑的启动项" class="headerlink" title="3.2.2、查看是否存在可疑的启动项"></a>3.2.2、查看是否存在可疑的启动项</h5><ul><li>用Autoruns查看是否有可疑的启动项<ul><li>未发现可疑的启动项</li></ul></li></ul><p><img src="/../images/yjxy-1/16.png"></p><h5 id="3-2-3、查看计划任务"><a href="#3-2-3、查看计划任务" class="headerlink" title="3.2.3、查看计划任务"></a>3.2.3、查看计划任务</h5><ul><li>查看计划任务，之前WK计划任务已经被删除，所以现在无异常的计划任务</li></ul><p><img src="/../images/yjxy-1/17.png"></p><h5 id="3-2-4、查看服务"><a href="#3-2-4、查看服务" class="headerlink" title="3.2.4、查看服务"></a>3.2.4、查看服务</h5><ul><li>未发现可疑的服务</li></ul><p><img src="/../images/yjxy-1/18.png"></p><h5 id="3-2-5、查看镜像劫持"><a href="#3-2-5、查看镜像劫持" class="headerlink" title="3.2.5、查看镜像劫持"></a>3.2.5、查看镜像劫持</h5><ul><li>发现shift粘贴键后门，后门路径C:\windows\system32\cmd.exe 可以在不登录服务器的情况下，以Administrator权限 执行cmd</li></ul><p><img src="/../images/yjxy-1/19.png"></p><h5 id="3-2-6、查看是否有隐藏用户"><a href="#3-2-6、查看是否有隐藏用户" class="headerlink" title="3.2.6、查看是否有隐藏用户"></a>3.2.6、查看是否有隐藏用户</h5><ul><li>通过 控制面板\所有控制面板项\用户帐户\管理帐户 里面只有administrator和guest用户</li></ul><p><img src="/../images/yjxy-1/20.png"></p><ul><li>通过注册表查看 HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names 发现wxiaoge$</li></ul><p><img src="/../images/yjxy-1/21.png"></p><h4 id="3-3、排查网络连接"><a href="#3-3、排查网络连接" class="headerlink" title="3.3、排查网络连接"></a>3.3、排查网络连接</h4><ul><li>使用netstat -ano 查看网络连接，未发现可疑连接</li></ul><p><img src="/../images/yjxy-1/22.png"></p><h4 id="四、应急响应溯源"><a href="#四、应急响应溯源" class="headerlink" title="四、应急响应溯源"></a>四、应急响应溯源</h4><h5 id="4-1-1、查看WK木马的计划任务创建时间"><a href="#4-1-1、查看WK木马的计划任务创建时间" class="headerlink" title="4.1.1、查看WK木马的计划任务创建时间"></a>4.1.1、查看WK木马的计划任务创建时间</h5><ul><li>WK木马的创建者是Administrator,创建时间是2022-03-23 9:46:17</li></ul><p><img src="/../images/yjxy-1/13.png"></p><h5 id="4-2-1-排查安全日志"><a href="#4-2-1-排查安全日志" class="headerlink" title="4.2.1 排查安全日志"></a>4.2.1 排查安全日志</h5><ul><li>分析安全日志 ，发现21号有大量的爆破</li></ul><p><img src="/../images/yjxy-1/25.png"></p><ul><li>但是均未发现ip地址</li></ul><p><img src="/../images/yjxy-1/26.png"></p><p><img src="/../images/yjxy-1/27.png"></p><ul><li>接着查找，发现2022&#x2F;3&#x2F;21 16:27:12，IP：192.168.226.1成功登录该服务器</li></ul><p><img src="/../images/yjxy-1/28.png"></p><ul><li>继续排查，发现在 2022&#x2F;3&#x2F;21 16:28:12 黑客使用administrator账户创建了隐藏账户 wxiaoge$</li></ul><p><img src="/../images/yjxy-1/29.png"></p><ul><li>继续排查系统日志，发现在 2022&#x2F;3&#x2F;23 9:36:02 服务器去解析 xmr.usa-138.com 域名，这个域名是公共矿池，说明此时已经植入挖矿程序并且运行</li></ul><p><img src="/../images/yjxy-1/30.png"></p><h4 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h4><h5 id="5-1-1、寻找WK小结"><a href="#5-1-1、寻找WK小结" class="headerlink" title="5.1.1、寻找WK小结"></a>5.1.1、寻找WK小结</h5><ul><li>1、WaKuang病毒位置：C:\Users\Administrator\Downloads\wkbd\wkbd\ 目录<ul><li>删除C:\Users\Administrator\Downloads\wkbd\wkbd\ 目录</li></ul></li><li>2、存在挖矿程序的计划任务，任务名字system<ul><li>删除挖矿程序的计划任务。</li></ul></li></ul><h5 id="5-1-2-排查小结"><a href="#5-1-2-排查小结" class="headerlink" title="5.1.2 排查小结"></a>5.1.2 排查小结</h5><ul><li><p>1、存在Windows隐藏用户</p><ul><li>通过注册表找到并删除</li></ul></li><li><p>2、存在shift粘贴键后门</p><ul><li>删除sethc.exe</li></ul></li></ul><h5 id="5-1-3溯源小结"><a href="#5-1-3溯源小结" class="headerlink" title="5.1.3溯源小结"></a>5.1.3溯源小结</h5><ul><li>根据日志推测：<ul><li>黑客在2022&#x2F;3&#x2F;21 16:27:12对服务器爆破administrarot成功，用ip为192.168.226.1登录成功</li><li>在2022&#x2F;3&#x2F;21 16:28:12使用administrator服务器创建了隐藏用户wxiaoge</li><li>在2022&#x2F;3&#x2F;23 9:36:02 植入挖矿程序并且运行</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>应急</category>
      
    </categories>
    
    
    <tags>
      
      <tag>应急响应</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红日靶场（一）（上）</title>
    <link href="/2022/08/26/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%911/"/>
    <url>/2022/08/26/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%911/</url>
    
    <content type="html"><![CDATA[<h1 id="红日内网靶场——红队评估-一-上"><a href="#红日内网靶场——红队评估-一-上" class="headerlink" title="红日内网靶场——红队评估(一)(上)"></a>红日内网靶场——红队评估(一)(上)</h1><h4 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h4><h5 id="1-1、环境部署"><a href="#1-1、环境部署" class="headerlink" title="1.1、环境部署"></a>1.1、环境部署</h5><ul><li>WIN7 （web服务器） 双网卡（内外网 IP）<ul><li>网卡 1 IP:192.168.52.143 （内网服务器 存在yxcms）</li><li>网卡 2 IP:192.168.17.130（外网DHCP自动获取）</li></ul></li><li>WIN 2008（域控） 单内网网卡<ul><li>网卡IP：192.168.52.138</li></ul></li><li>WIN 2003 （域成员） 单内网卡<ul><li>网卡IP ：192.168.52.141</li></ul></li><li>Kali （攻击机） 外网网卡<ul><li>网卡IP：192.168.17.131</li></ul></li></ul><h5 id="1-2、拓扑图"><a href="#1-2、拓扑图" class="headerlink" title="1.2、拓扑图"></a>1.2、拓扑图</h5><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/1.png"></p><h4 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h4><h5 id="2-1、页面信息收集"><a href="#2-1、页面信息收集" class="headerlink" title="2.1、页面信息收集"></a>2.1、页面信息收集</h5><ul><li>192.168.17.130 打开是一个phpstudy的探针<ul><li>有一个数据库测试功能，尝试弱口令 root&#x2F;root，测试正常，说明数据库存在弱口令</li><li>发现了绝对路径和一些组件的版本信息，绝对路径可以sql注入写shell，版本信息可以找一些历史漏洞</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/2.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/3.png"></p><h5 id="2-2、端口加敏感目录扫描"><a href="#2-2、端口加敏感目录扫描" class="headerlink" title="2.2、端口加敏感目录扫描"></a>2.2、端口加敏感目录扫描</h5><ul><li>使用nmap对192.168.17.130进行端口扫描 找找是否存在高危端口<ul><li>存在3306端口，是mysql的端口，刚才已经知道有弱口令了，一会儿可以直接利用。</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/4.png"></p><ul><li>使用dirb扫描目录 探测是否存在敏感目录<ul><li>存在phpmyadmin，知道绝对路径，可以尝试写shell</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/5.png"></p><ul><li>登陆phpmyadmin看看是否有可以利用的数据<ul><li>root&#x2F;root 弱口令登陆成功</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/6.png"></p><ul><li>发现存在yxcms的数据库，尝试访问yxcms的路径。</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/8.png"></p><h5 id="2-3、yxcms的信息收集"><a href="#2-3、yxcms的信息收集" class="headerlink" title="2.3、yxcms的信息收集"></a>2.3、yxcms的信息收集</h5><ul><li>观察页面，发现公告上写着后台路径和 默认口令<ul><li>后台路径：&#x2F;index.php?r&#x3D;admin 默认口令：admin&#x2F;123456</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/9.png"></p><ul><li>访问后台尝试默认密码登陆</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/10.png"></p><ul><li>登陆成功</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/11.png"></p><ul><li>通过观察后台页面，发现 有一个前台模版新建模版的功能点，可以直接写 php文件。</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/12.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/13.png"></p><h4 id="三、漏洞利用"><a href="#三、漏洞利用" class="headerlink" title="三、漏洞利用"></a>三、漏洞利用</h4><h5 id="3-1、利用phpmyadmin写shell"><a href="#3-1、利用phpmyadmin写shell" class="headerlink" title="3.1、利用phpmyadmin写shell"></a>3.1、利用phpmyadmin写shell</h5><ul><li>直接通过 SQL 查询语句 outfile 写入一句话木马，先看是否存在写入的权限<ul><li>show global variables like ‘%secure%’;<ul><li>显示为NULL 只可读不可写</li></ul></li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/14.png"></p><ul><li><p>开启全局日志getshell</p><ul><li>show variables like ‘%general%’;查询全局日志变量配置</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/15.png"></p><ul><li>开启general_log将所有查询语句都记录到指定可以访问的文件中</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/16.png"></p><ul><li>日志记录的目录，是绝对路径，在php探针上已经拿到。</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/17.png"></p><ul><li>检查是否更改成功</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/17.png"></p><ul><li>尝试写入一句话木马. 就算报错日志也会记录下来。</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/18.png"></p><ul><li>尝试用哥斯拉连接  成功</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/19.png"></p><h5 id="3-2、yxcms上传webshell"><a href="#3-2、yxcms上传webshell" class="headerlink" title="3.2、yxcms上传webshell"></a>3.2、yxcms上传webshell</h5><ul><li>利用前台模版新建一个php页面，写上一句话木马，抓包看看是否有回显路径<ul><li>并没有返回URL的路径，只能试试别的办法</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/20.png"></p><ul><li><p>没有路径 可以看看robots.txt 或者去做目录扫描，看看是否有新的发现</p><ul><li><p>访问robots.txt 看是否存在可利用的目录</p><ul><li>存在&#x2F;data &#x2F;protected目录 访问了一下 发现有个目录浏览，找到刚才传的she_ll.php</li></ul></li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/22.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/23.png"></p><pre><code class="hljs">- 路径http://192.168.17.130/yxcms//protected/apps/default/view/default/she_ll.php</code></pre><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/25.png"></p><pre><code class="hljs">- 尝试连接</code></pre><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/26.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/27.png"></p>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
