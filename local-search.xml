<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python爬虫-函数</title>
    <link href="/2022/10/13/%E5%87%BD%E6%95%B0/"/>
    <url>/2022/10/13/%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><ul><li>定义函数的格式如下:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>():<br>    代码<br></code></pre></td></tr></table></figure></li><li>例子<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>() :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">456</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">567</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><ul><li>定义函数之后，就相当于有了一个具有某些功能的代码，想要让代码执行，必须调用函数，通过函数名()即可完成调用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义完函数后，函数是不会自动执行的，需要调用它才可以执行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>() :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">456</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">567</span>)<br><br>f()<br>f()<br><span class="hljs-comment"># 每次调用函数时，函数都会从头开始执行，当这个函数中的代码执行完毕后，就意味着调用结束了</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用函数来计算1和2的和</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum</span>():<br>  a = <span class="hljs-number">1</span><br>  b = <span class="hljs-number">2</span><br>  c = a + b<br>  <span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-built_in">sum</span>() <span class="hljs-comment"># 3</span><br><span class="hljs-comment">#  不实用</span><br></code></pre></td></tr></table></figure><ul><li>位置参数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 为了让一个函数更通用，既想让它计算哪两个数的和，就让它计算哪两个数的和，在定义函数的时候可以让函数接收数据，就解决了这个问题，这就是函数的参数</span><br><span class="hljs-comment"># 定义函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a,b</span>):<br>  c = a + b<br>  <span class="hljs-built_in">print</span>(c)<br><span class="hljs-comment"># 调用带有参数的函数，要保证一一对应</span><br><span class="hljs-comment">#  位置参数 按照位置一一对应来传递参数</span><br><span class="hljs-built_in">sum</span>(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>) <span class="hljs-comment"># 300</span><br></code></pre></td></tr></table></figure></li><li>关键字传参(一般不用)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">b = <span class="hljs-number">200</span>,a = <span class="hljs-number">100</span></span>) :<br>  c = a + b<br>  <span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">sum</span>()<br></code></pre></td></tr></table></figure></li><li>定义函数的时候 sum(a,b) 我们称a 和 b 为形式参数 简称 形参</li><li>调用函数的时候 sum(1,2) 我们称1和2为实际参数 简称 实参</li></ul><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><h1 id="返回值的关键字是return，存在函数中"><a href="#返回值的关键字是return，存在函数中" class="headerlink" title="返回值的关键字是return，存在函数中"></a>返回值的关键字是return，存在函数中</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">buyCar</span>():<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;奥迪&#x27;</span><br><br><span class="hljs-comment"># 使用一个变量来接受函数的返回值</span><br>car = buyCar()<br><span class="hljs-built_in">print</span>(car) <span class="hljs-comment"># 奥迪</span><br></code></pre></td></tr></table></figure><h4 id="案例练习"><a href="#案例练习" class="headerlink" title="案例练习"></a>案例练习</h4><h1 id="定义一个函数-然后让函数计算两个数值-并且返回这个计算之后的结果"><a href="#定义一个函数-然后让函数计算两个数值-并且返回这个计算之后的结果" class="headerlink" title="定义一个函数 然后让函数计算两个数值 并且返回这个计算之后的结果"></a>定义一个函数 然后让函数计算两个数值 并且返回这个计算之后的结果</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">addsum</span>(<span class="hljs-params">a,b</span>):<br>  c = a + b<br>  <span class="hljs-keyword">return</span> <br>asum = addsum(<span class="hljs-number">123</span>,<span class="hljs-number">456</span>)<br><span class="hljs-built_in">print</span>(asum) <span class="hljs-comment"># 579</span><br></code></pre></td></tr></table></figure><h3 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h3><ul><li>局部变量：在函数的内部定义的变量 我们称之为局部变量</li></ul><h1 id="特点-：其作用域范围是函数内部-而函数的外部是不可以使用的"><a href="#特点-：其作用域范围是函数内部-而函数的外部是不可以使用的" class="headerlink" title="特点 ：其作用域范围是函数内部 而函数的外部是不可以使用的"></a>特点 ：其作用域范围是函数内部 而函数的外部是不可以使用的</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>  a = <span class="hljs-number">1</span><br>  <span class="hljs-built_in">print</span>(a)<br>f1()<br><span class="hljs-comment"># 函数里面有a 但是外面没有a 所以说函数的外部是不可以使用的</span><br>ptint(a) <span class="hljs-comment"># NameError: name &#x27;a&#x27; is not defined</span><br></code></pre></td></tr></table></figure><ul><li>全局变量定义在函数外部的变量 我们称之为全局变量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span> <span class="hljs-comment"># 外部定义的变量  全局变量</span><br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>  <span class="hljs-built_in">print</span>(a)<br>f1() <span class="hljs-comment"># 1</span><br><span class="hljs-comment"># 在满足条件的情况下 要使用作用域最小的那个变量范围</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫-数据类型高级</title>
    <link href="/2022/10/10/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%AB%98%E7%BA%A7/"/>
    <url>/2022/10/10/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型高级"><a href="#数据类型高级" class="headerlink" title="数据类型高级"></a>数据类型高级</h1><h3 id="字符串高级"><a href="#字符串高级" class="headerlink" title="字符串高级"></a>字符串高级</h3><p><strong>字符串的常见操作包括：</strong></p><ul><li><p>获取长度-len-len函数可以获取字符串的长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br></code></pre></td></tr></table></figure></li><li><p>查找内容-find-查找指定内容在字符串中是否存在，如果存在就返回该内容在字符串中第一次出现的开始位置的索引值，如果不存在，则返回-1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a1 = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-built_in">print</span>(a1.find(<span class="hljs-string">&#x27;e&#x27;</span>)) <span class="hljs-comment"># //1    print(a1.find(&#x27;p&#x27;)) // -1</span><br></code></pre></td></tr></table></figure></li><li><p>判断-startswith,endswith-判断字符串是不是以谁谁谁开头&#x2F;结尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a2 = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-built_in">print</span>(a2.startswith(<span class="hljs-string">&#x27;h&#x27;</span>)) <span class="hljs-comment"># True 否则返回False</span><br><span class="hljs-built_in">print</span>(a2.endswith(<span class="hljs-string">&#x27;o&#x27;</span>)) <span class="hljs-comment"># True 否则返回False</span><br></code></pre></td></tr></table></figure></li><li><p>计算出现次数-count-返回str在start和end之间 在mystr里面出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a3 = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-built_in">print</span>(a3.count(<span class="hljs-string">&#x27;l&#x27;</span>)) <span class="hljs-comment"># 两次</span><br></code></pre></td></tr></table></figure></li><li><p>替换内容-replace-替换字符串中指定的内容，如果指定次数count，则替换不会超过count</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a4 = <span class="hljs-string">&#x27;xxddd&#x27;</span><br><span class="hljs-built_in">print</span>(a4.replace(<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>)) <span class="hljs-comment"># nnddd</span><br></code></pre></td></tr></table></figure></li><li><p>切割字符串-split-通过参数的内容切割字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a5 = <span class="hljs-string">&#x27;1@2@3@4&#x27;</span><br><span class="hljs-built_in">print</span>(a5.split(<span class="hljs-string">&#x27;@&#x27;</span>)) <span class="hljs-comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span><br></code></pre></td></tr></table></figure></li><li><p>修改大小写-upper，lower-将字符串中的大小写互相转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a6 = <span class="hljs-string">&#x27;hElLo&#x27;</span><br><span class="hljs-built_in">print</span>(a6.upper()) <span class="hljs-comment"># 将所有的小写字母变成大写字母 HELLO</span><br><span class="hljs-built_in">print</span>(a6.lower()) <span class="hljs-comment"># 将所有的大写字母变成小写字母 hello</span><br></code></pre></td></tr></table></figure></li><li><p>空格处理-strip-去空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a7 = <span class="hljs-string">&#x27;   a   &#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a7)) <span class="hljs-comment"># 7</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a7.strip())) <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure></li><li><p>字符串拼接-join-字符串拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a8 = <span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-built_in">print</span>(a8.join(<span class="hljs-string">&#x27;hello&#x27;</span>)) <span class="hljs-comment"># haealalao</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="列表高级（列表的增删改查）"><a href="#列表高级（列表的增删改查）" class="headerlink" title="列表高级（列表的增删改查）"></a>列表高级（列表的增删改查）</h3><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><ul><li><p>append-在末尾添加元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">str_list = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br>str_list.append(<span class="hljs-string">&#x27;d&#x27;</span>) <span class="hljs-comment"># 将d加入到列表最后</span><br><span class="hljs-built_in">print</span>(str_list) <span class="hljs-comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br></code></pre></td></tr></table></figure></li><li><p>insert 在指定位置插入元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">num_list = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>]<br>num_list.insert(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;2&#x27;</span>) <span class="hljs-comment"># 在下标为1的地方插入‘2’</span><br><span class="hljs-built_in">print</span>(num_list) <span class="hljs-comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span><br></code></pre></td></tr></table></figure></li><li><p>extend-合并两个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">sec_list = [<span class="hljs-string">&#x27;web&#x27;</span>,<span class="hljs-string">&#x27;pwn&#x27;</span>,<span class="hljs-string">&#x27;md5&#x27;</span>]<br>sec1_list = [<span class="hljs-string">&#x27;ctf&#x27;</span>,<span class="hljs-string">&#x27;hw&#x27;</span>,<span class="hljs-string">&#x27;zb&#x27;</span>]<br>sec_list.extend(sec1_list) <span class="hljs-comment"># 将sec_list的数据一个一个加入到列表sec_list后面</span><br><span class="hljs-built_in">print</span>(sec_list) <span class="hljs-comment"># [&#x27;web&#x27;, &#x27;pwn&#x27;, &#x27;md5&#x27;, &#x27;ctf&#x27;, &#x27;hw&#x27;, &#x27;zb&#x27;]</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h4><ul><li>通过指定下标来访问列表元素，修改列表时，为列表的下标赋值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">city_list = [<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-string">&#x27;天津&#x27;</span>，<span class="hljs-string">&#x27;石家庄&#x27;</span>,<span class="hljs-string">&#x27;济南&#x27;</span>]<br><span class="hljs-comment"># 将列表中的元素值修改</span><br><span class="hljs-comment"># 可以通过修改下标</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><ul><li>所谓查找，就是看指定元素是否存在<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># in 是否在列表中</span><br>num0_list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-comment"># 判断一下在控制台输入的那个数据是否在列表中</span><br>num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入你想要的数字&#x27;</span>))<br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">in</span> num0_list :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;在&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;不在&#x27;</span>)<br><span class="hljs-comment"># not in 是否不在列表中</span><br>game_list=[<span class="hljs-string">&#x27;gta5&#x27;</span>,<span class="hljs-string">&#x27;pbug&#x27;</span>]<br><span class="hljs-comment"># 在控制台输入游戏，然后判断是否不在</span><br>game = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入游戏&#x27;</span>)<br><span class="hljs-keyword">if</span> game <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> game_list :<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;不在&#x27;</span>)<br><span class="hljs-keyword">else</span> :<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;在&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p><strong>列表中常用的删除方法有</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># del 根据下标来删除</span><br>q_list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-keyword">del</span> q_list[<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(q_list) <span class="hljs-comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span><br><span class="hljs-comment">#  pop 删除最后一个元素</span><br>w_list = [<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>]<br>w_list.pop()<br><span class="hljs-built_in">print</span>(w_list) <span class="hljs-comment"># [&#x27;2&#x27;, &#x27;4&#x27;, &#x27;6&#x27;]</span><br><span class="hljs-comment"># remove 删除指定元素的值</span><br>e_list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>e_list.remove(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(e_list) <span class="hljs-comment"># [1, 2, 4]</span><br></code></pre></td></tr></table></figure><h3 id="元组高级"><a href="#元组高级" class="headerlink" title="元组高级"></a>元组高级</h3><p><strong>Python的元组与列表类似，不同之处在于-元组的元素不能修改-，元组使用小括号，列表使用方括号</strong></p><h4 id="访问元组"><a href="#访问元组" class="headerlink" title="访问元组"></a>访问元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a_tuple = (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(a_tuple[<span class="hljs-number">2</span>]) <span class="hljs-comment"># 4</span><br><span class="hljs-built_in">print</span>(a_tuple) <span class="hljs-comment"># (2,3,4,5)</span><br></code></pre></td></tr></table></figure><h4 id="修改元组-不可以被修改"><a href="#修改元组-不可以被修改" class="headerlink" title="修改元组(不可以被修改)"></a>修改元组(不可以被修改)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">b_tuple = (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment"># 修改 会报错</span><br>b_tuple[<span class="hljs-number">2</span>] = <span class="hljs-number">5</span> <span class="hljs-comment"># TypeError: &#x27;tuple&#x27; object does not support item assignment</span><br><span class="hljs-built_in">print</span>(b_tuple)<br></code></pre></td></tr></table></figure><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">c_tuple = (<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(c_tuple)) <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br><span class="hljs-comment"># 只有一个数组后面需要加逗号</span><br>d_tuple = (<span class="hljs-number">2</span>,)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(d_tuple)) <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><ul><li>切片是指对操作的对象截取其中一部分的操作。<strong>字符串，列表，元组</strong>都支持切片操作</li><li>切片语法：[起始：结束：步长]，也可以简化是使用[起始：结束]</li><li>注意：选取的区间是从“起始位置“开始到前一个结束的位置<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在切片中直接写下标来访问元素</span><br>b = <span class="hljs-string">&#x27;china&#x27;</span><br><span class="hljs-built_in">print</span>(b[<span class="hljs-number">3</span>]) <span class="hljs-comment"># n</span><br><span class="hljs-comment"># 左闭右开区间 包含坐标左边的数据，不包含右边的数据</span><br><span class="hljs-built_in">print</span>(b[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>]) <span class="hljs-comment"># chin</span><br><span class="hljs-comment"># 从起始值开始 一直到最后</span><br><span class="hljs-built_in">print</span>(b[<span class="hljs-number">1</span>:]) <span class="hljs-comment"># hina</span><br><span class="hljs-comment"># 从下标为0的索引的元素开始 一直到第二个参数为止 遵循左闭右开区间</span><br><span class="hljs-built_in">print</span>(b[:<span class="hljs-number">3</span>]) <span class="hljs-comment"># chi</span><br><span class="hljs-comment"># 从下标为0的位置的开始，到下标为3的位置结束 ，每次增加2个长度</span><br><span class="hljs-built_in">print</span>(b[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>:<span class="hljs-number">2</span>]) <span class="hljs-comment"># ci</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="字典的高级"><a href="#字典的高级" class="headerlink" title="字典的高级"></a>字典的高级</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">china = &#123;<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;sjz&#x27;</span>,<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;jinan&#x27;</span>&#125;<br><span class="hljs-comment"># 查询方法一</span><br><span class="hljs-built_in">print</span>(china[<span class="hljs-string">&#x27;hebei&#x27;</span>]) <span class="hljs-comment"># sjz</span><br><span class="hljs-comment"># 使用[]方法 获取不存在的key的时候 会报错  KeyError: &#x27;ss&#x27;</span><br><span class="hljs-built_in">print</span>(china[<span class="hljs-string">&#x27;ss&#x27;</span>])<br><span class="hljs-comment"># 查询方法二</span><br><span class="hljs-built_in">print</span>(china.get(<span class="hljs-string">&#x27;shandong&#x27;</span>)) <span class="hljs-comment"># jinan</span><br><span class="hljs-comment"># 使用get方法时候 获取不存在的 会返回None</span><br><span class="hljs-built_in">print</span>(china.get(<span class="hljs-string">&#x27;sd&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><span class="hljs-comment"># 修改之前</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment">#&#123;&#x27;shandong&#x27;: &#x27;qingdao&#x27;, &#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;&#125;</span><br><span class="hljs-comment"># 修改 shandong的值</span><br>city[<span class="hljs-string">&#x27;shandong&#x27;</span>] = <span class="hljs-string">&#x27;jinan&#x27;</span><br><span class="hljs-comment">#修改之后</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#x27;shandong&#x27;: &#x27;jinan&#x27;, &#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><span class="hljs-comment"># 添加前</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;&#125;</span><br><span class="hljs-comment"># 给字典添加一个 key value</span><br><span class="hljs-comment"># 如果使用变量的名字[&#x27;键&#x27;] = 数据时 这个键如果在字典中不存在 那么就会变成新增元素</span><br>city[<span class="hljs-string">&#x27;shandong&#x27;</span>] = <span class="hljs-string">&#x27;jinan&#x27;</span><br><span class="hljs-built_in">print</span>(city)  <span class="hljs-comment"># &#123;&#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;, &#x27;shandong&#x27;: &#x27;jinan&#x27;&#125;</span><br><span class="hljs-comment"># 如果这个键在字典中存在 那么就会变成修改元素</span><br>city[<span class="hljs-string">&#x27;hebei&#x27;</span>] = <span class="hljs-string">&#x27;tangshan&#x27;</span> <br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#x27;hebei&#x27;: &#x27;tangshan&#x27;, &#x27;shandong&#x27;: &#x27;jinan&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><h5 id="del"><a href="#del" class="headerlink" title="del"></a>del</h5><ul><li>删除字典中指定的某一个元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><span class="hljs-comment"># 删除前</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#x27;shandong&#x27;: &#x27;qingdao&#x27;, &#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;&#125;</span><br><span class="hljs-comment"># 删除元素</span><br><span class="hljs-keyword">del</span> city[<span class="hljs-string">&#x27;shandong&#x27;</span>]<br><span class="hljs-comment"># 删除之后</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;&#125;</span><br></code></pre></td></tr></table></figure></li><li>删除整个字典<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><span class="hljs-comment"># 删除前</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#x27;shandong&#x27;: &#x27;qingdao&#x27;, &#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;&#125;</span><br><span class="hljs-comment"># 删除整个字典</span><br><span class="hljs-keyword">del</span> city<br><span class="hljs-comment"># 删除之后</span><br><span class="hljs-built_in">print</span>(city)  <span class="hljs-comment"># NameError: name &#x27;city&#x27; is not defined</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h5><ul><li>清空字典 但是保留字典对象<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 清空指的是将字典中所有的数据 都删除掉 保留字典的结构</span><br>city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><span class="hljs-comment"># 删除前</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#x27;shandong&#x27;: &#x27;qingdao&#x27;, &#x27;hebei&#x27;: &#x27;shijiazhuang&#x27;&#125;</span><br><span class="hljs-comment"># 清空字典</span><br>city.clear()<br><span class="hljs-comment"># 删除后</span><br><span class="hljs-built_in">print</span>(city) <span class="hljs-comment"># &#123;&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><h5 id="遍历就是一个一个输出"><a href="#遍历就是一个一个输出" class="headerlink" title="遍历就是一个一个输出"></a>遍历就是一个一个输出</h5><ul><li>遍历字典中的key<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><span class="hljs-comment"># 字典.keys()方法 获取字典中的所有的key值 key是一个变量的名字 可以随便写</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> city.keys():<br>  <span class="hljs-built_in">print</span>(key) <span class="hljs-comment"># shandong  hebei</span><br></code></pre></td></tr></table></figure></li><li>遍历字典中的value<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><span class="hljs-comment"># 字典.values() 获取字典中的所有的value值 value是一个变量的名字 可以随便写</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> city.values() :<br>  <span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure></li><li>遍历字典的value和key<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> city.items() :<br>  <span class="hljs-built_in">print</span>(key,value) <span class="hljs-comment">#shandong qingdao hebei shijiazhuang</span><br></code></pre></td></tr></table></figure></li><li>遍历字典的项&#x2F;元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">city = &#123;<span class="hljs-string">&#x27;shandong&#x27;</span>:<span class="hljs-string">&#x27;qingdao&#x27;</span>,<span class="hljs-string">&#x27;hebei&#x27;</span>:<span class="hljs-string">&#x27;shijiazhuang&#x27;</span>&#125;<br><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> city.items() :<br>  <span class="hljs-built_in">print</span>(item) <span class="hljs-comment">#(&#x27;shandong&#x27;, &#x27;qingdao&#x27;) (&#x27;hebei&#x27;, &#x27;shijiazhuang&#x27;)</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域环境搭建</title>
    <link href="/2022/10/09/%E5%9F%9F%E6%8E%A7%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/10/09/%E5%9F%9F%E6%8E%A7%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="域环境搭建"><a href="#域环境搭建" class="headerlink" title="域环境搭建"></a>域环境搭建</h1><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul><li>Windows Server 2016</li></ul><h3 id="一、-安装域环境"><a href="#一、-安装域环境" class="headerlink" title="一、 安装域环境"></a>一、 安装域环境</h3><ul><li><p>1.1、在开始菜单点击服务器管理器<br><img src="/../images/ykdj/1.png"></p></li><li><p>1.2、在服务器管理器中点击<strong>新建角色和功能</strong><br><img src="/../images/ykdj/2.png"></p></li><li><p>1.3、选择服务器<br><img src="/../images/ykdj/2.1.png"></p></li><li><p>1.4、一直默认下一步，到服务器角色安装的时候，选择如图<br><img src="/../images/ykdj/3.png"></p></li><li><p>如果选择dns服务器的时候出此提示，那么就去手动配置一个ip<br><img src="/../images/ykdj/4.png"><br><img src="/../images/ykdj/5.png"></p></li><li><p>选择如图，下一步就行了<br><img src="/../images/ykdj/6.png"></p></li><li><p>1.5、功能，默认就好，接着下一步<br><img src="/../images/ykdj/7.png"></p></li><li><p>1.6、一直下一步然后点安装<br><img src="/../images/ykdj/8.png"></p></li><li><p>1.7、等待就好，安装完成关闭<br><img src="/../images/ykdj/9.png"></p></li></ul><h3 id="二、-配置域"><a href="#二、-配置域" class="headerlink" title="二、 配置域"></a>二、 配置域</h3><h4 id="提升域控"><a href="#提升域控" class="headerlink" title="提升域控"></a>提升域控</h4><ul><li><p>2.1、在服务器管理器界面，如图点击<br><img src="/../images/ykdj/10.png"></p></li><li><p>2.2、选择添加新林，然后下面写域名，接着下一步<br><img src="/../images/ykdj/11.png"></p></li><li><p>2.3、域控制器选项，默认，输入密码，下一步<br><img src="/../images/ykdj/12.png"></p></li><li><p>2.4、一直默认下一步，然后到先决条件点击安装<br><img src="/../images/ykdj/13.png"><br><img src="/../images/ykdj/14.png"></p></li><li><p>2.5 重启以后查看是否为域<br><img src="/../images/ykdj/15.png"></p></li></ul><h4 id="加入域控"><a href="#加入域控" class="headerlink" title="加入域控"></a>加入域控</h4><ul><li>创建个域用户，方便另一台加入<br><img src="/../images/ykdj/15.1.png"></li><li>选择本地域名-Users-新建-用户<br><img src="/../images/ykdj/15.2.png"><br><img src="/../images/ykdj/15.3.png"></li><li>输入信息，点击确定<br><img src="/../images/ykdj/15.4.png"></li></ul><p><strong>用另一台同内网的机子，尝试加入域控</strong></p><ul><li><p>2.6、更改网络设置<br><img src="/../images/ykdj/16.1.png"></p></li><li><p>2.、选择计算机-属性<br><img src="/../images/ykdj/16.png"></p></li><li><p>2.7、更改设置<br><img src="/../images/ykdj/17.png"></p></li><li><p>2.8、选择更改<br><img src="/../images/ykdj/18.png"></p></li><li><p>2.9、输入刚才的创建的域名，点击确定<br><img src="/../images/ykdj/19.png"></p></li><li><p>2.10、输入刚才新建的用户名和密码，尝试加入域<br><img src="/../images/ykdj/20.png"></p></li></ul><p><strong>成功，重启 执行域命令</strong><br><img src="/../images/ykdj/21.png"></p><p><img src="/../images/ykdj/22.png"></p>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫-流程控制语句</title>
    <link href="/2022/08/31/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2022/08/31/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><h3 id="1、if关键字"><a href="#1、if关键字" class="headerlink" title="1、if关键字"></a>1、if关键字</h3><ul><li>if语句是用来进行判断的，格式如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 判断的条件 :<br>    代码（如果判断条件为<span class="hljs-literal">True</span>的时候执行<span class="hljs-keyword">if</span>下面的内容<br></code></pre></td></tr></table></figure><ul><li>demo_1:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">30</span><br><span class="hljs-comment">#如果你的年龄大于18 那么就是成年了</span><br><span class="hljs-keyword">if</span> age &gt; <span class="hljs-number">18</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我已经成年了&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><p>运行结果<br><code>我已经成年了</code></p></li><li><p>demo_2:</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">16</span> <br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我已经成年了&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><p>运行结果：</p><blockquote><p>无结果</p></blockquote></li><li><p>if 案例联系</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在控制台输入一个年龄 如果年龄大于18了 那么打印可以去网吧了</span><br><br><span class="hljs-comment"># input 返回的是字符串类型</span><br>age = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的年龄&quot;</span>)<br><span class="hljs-keyword">if</span> age &gt; <span class="hljs-number">18</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;您成年了“)</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 案例中考察了三个知识点</span><br><span class="hljs-string"># （1）控制台输入</span><br><span class="hljs-string"># （2）强制类型转换</span><br><span class="hljs-string"># （3） int和str是不能比较的</span><br></code></pre></td></tr></table></figure><h3 id="2、ifelse关键字"><a href="#2、ifelse关键字" class="headerlink" title="2、ifelse关键字"></a>2、ifelse关键字</h3><ul><li><p>ifelse 语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 判断条件:<br>    判断条件为<span class="hljs-literal">True</span>的时候执行的代码<br><span class="hljs-keyword">else</span> :<br>    判断条件为<span class="hljs-literal">False</span>的时候执行的代码<br><br><span class="hljs-comment">#  ifelse案例</span><br>age = <span class="hljs-number">17</span><br><span class="hljs-keyword">if</span> age &gt; <span class="hljs-number">18</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你成年了&quot;</span>)<br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你未成年&#x27;</span>)<br><span class="hljs-comment"># 输出 你未成年</span><br></code></pre></td></tr></table></figure></li><li><p>ifelse 案例练习</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在控制台输入一个年龄 如果年龄大于18了 那么输出 你已经成年了</span><br><span class="hljs-comment"># 否则那么输出 你还没有成年</span><br>age = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的年龄&quot;</span>) <span class="hljs-comment"># int(input(&quot;请输入你的年龄&quot;))</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(age) &gt; <span class="hljs-number">18</span> :   <span class="hljs-comment"># age &gt; 18 :</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你成年了&quot;</span>)<br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你未成年&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="3、elif关键字"><a href="#3、elif关键字" class="headerlink" title="3、elif关键字"></a>3、elif关键字</h3><ul><li>案例练习</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在控制台上输入您的成绩分数</span><br><span class="hljs-comment"># 如果你考了90以上，成绩为优秀</span><br><span class="hljs-comment"># 如果你考了80以上，成绩为良好</span><br><span class="hljs-comment"># 如果你考了70以上，成绩为中等</span><br><span class="hljs-comment"># 如果你考了60以上，成绩为合格</span><br><span class="hljs-comment"># 否则，成绩为不合格</span><br>score = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的成绩:&quot;</span>))<br><span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">90</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;优秀&quot;</span>)<br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">80</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;良好&quot;</span>)<br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">70</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;中等&quot;</span>)<br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">60</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;合格&quot;</span>)<br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不合格&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="4、for循环"><a href="#4、for循环" class="headerlink" title="4、for循环"></a>4、for循环</h3><ul><li><p>for 循环格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 要遍历的数据：<br>        方法体<br></code></pre></td></tr></table></figure></li><li><p>掌握五个点</p><ul><li>循环字符串</li><li>range(5)</li><li>range(1,6)</li><li>range(1,10,3)</li><li>循环一个列表</li></ul></li></ul><p><strong>循环字符串</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一个一个的输出 叫做循环 也叫做遍历</span><br>s = <span class="hljs-string">&quot;china&quot;</span><br><span class="hljs-comment"># for 最好用的一个循环</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s :<br><span class="hljs-comment"># i 是字符串中一个又一个的字符的变量</span><br><span class="hljs-comment"># s 代表的是要遍历的数据</span><br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p><strong>range(5)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># range方法的结果 一个可遍历的对象</span><br><span class="hljs-comment"># range(5) 0-4 左闭右开区间 （0，5）</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>) :<br>    <span class="hljs-built_in">print</span>(i)  <span class="hljs-comment"># 0,1,2,3,4</span><br></code></pre></td></tr></table></figure><p><strong>range(1,6)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># range(起始值，结束值)  eg：range(1,6)</span><br><span class="hljs-comment"># 左闭右开 1-5</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>):<br>    <span class="hljs-built_in">print</span>(i) <span class="hljs-comment"># 1,2,3,4,5</span><br></code></pre></td></tr></table></figure><p><strong>range(1,0,3)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(i) <span class="hljs-comment"># 1,4,7</span><br><br><span class="hljs-comment"># range(起始值,结束值,步长)</span><br><span class="hljs-comment"># 左闭右开区间</span><br><span class="hljs-comment">#  1-9 每隔三个数输出一个</span><br></code></pre></td></tr></table></figure><p><strong>循环一个列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 应用场景  会爬去一个列表返回给我们 需要将这些列表一个一个的遍历</span><br><br><span class="hljs-comment"># 循环一个列表</span><br><br>a_list = [<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;test1&quot;</span>,<span class="hljs-string">&quot;test2&quot;</span>]<br><span class="hljs-comment"># 遍历列表中的元素</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a_list :<br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-comment"># len() 的用法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a_list)) <span class="hljs-comment"># 判断列表中的元素的个数</span><br><br><span class="hljs-comment"># 遍历列表中的下标</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a_list)):<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫-运算符与输入输出</title>
    <link href="/2022/08/30/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2022/08/30/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="1、算数运算符"><a href="#1、算数运算符" class="headerlink" title="1、算数运算符"></a>1、算数运算符</h3><ul><li>下面以a&#x3D;10,b&#x3D;20为例进行计算<table><thead><tr><th><strong>运算符</strong></th><th><strong>描述</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>+</td><td>加</td><td>两个对象相加a+b输出结果30</td></tr><tr><td>-</td><td>减</td><td>得到负数或是一个数减去另一个数a-b输出结果-10</td></tr><tr><td>*</td><td>乘</td><td>两个数相乘或是返回一个被重复若干次的字符串a*b输出结果200</td></tr><tr><td>&#x2F;</td><td>除</td><td>b&#x2F;a输出结果2</td></tr><tr><td>&#x2F;&#x2F;</td><td>取整数</td><td>返回商的整数部分9&#x2F;&#x2F;2输出结果4，9.0&#x2F;&#x2F;2.0输出结果4.0</td></tr><tr><td>%</td><td>取余</td><td>返回除法的余数b%a输出结果0</td></tr><tr><td>**</td><td>指数</td><td>a**b为10的20次方</td></tr><tr><td>()</td><td>小括号</td><td>提高运算优先级，比如：（1+2）*3</td></tr></tbody></table></li></ul><ul><li><p>注意</p><blockquote><p>混合运算时优先级顺序为：<code>**</code>高于<code>* / % //</code>高于<code>+ -</code>,为了避免歧义，建议用()来处理运算优先级。并且，不同类型的数字在进行混合运算时，整数将会转换成浮点数进行运算。</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">3</span><br>b = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(a + b) <span class="hljs-comment"># 5</span><br><span class="hljs-built_in">print</span>(a - b) <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(a * b) <span class="hljs-comment"># 6</span><br><span class="hljs-built_in">print</span>(a / b) <span class="hljs-comment"># 1.5</span><br><span class="hljs-comment"># 取整</span><br><span class="hljs-built_in">print</span>(a // b) <span class="hljs-comment"># 1 </span><br><span class="hljs-comment"># 取余</span><br><span class="hljs-built_in">print</span>(a % b) <span class="hljs-comment"># 1</span><br><span class="hljs-comment"># 指数 幂</span><br><span class="hljs-built_in">print</span>(a ** b) <span class="hljs-comment"># 9</span><br></code></pre></td></tr></table></figure><ul><li>扩展<ul><li>字符串的加法 是拼接的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;123&#x27;</span><br>b = <span class="hljs-string">&#x27;456&#x27;</span><br><span class="hljs-built_in">print</span>(a + b) <span class="hljs-comment"># 123456</span><br></code></pre></td></tr></table></figure></li><li>在python中 + 两端都是字符串才可以进行加法运算<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;123&#x27;</span><br>b = <span class="hljs-number">456</span><br><span class="hljs-built_in">print</span>(a+<span class="hljs-built_in">str</span>(b)) <span class="hljs-comment"># 123456</span><br></code></pre></td></tr></table></figure></li><li>字符串的乘法 是将字符串重复多少次<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;test&#x27;</span><br><span class="hljs-built_in">print</span>(a * <span class="hljs-number">3</span>) <span class="hljs-comment"># testtesttest</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2、赋值运算符"><a href="#2、赋值运算符" class="headerlink" title="2、赋值运算符"></a>2、赋值运算符</h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>描述</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值运算符</td><td>把&#x3D;号右边的结果 赋给左边的变量，如num &#x3D; 1 + 2 * 3，结果num的值为7.</td></tr></tbody></table><ul><li>例子</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 单个变量赋值</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num = <span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num<br><span class="hljs-number">10</span><br><br><span class="hljs-comment"># 同时为多个变量赋值（使用等号连接）</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = b = <span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b<br><span class="hljs-number">4</span><br>&gt;&gt;&gt;<br><br><span class="hljs-comment"># 多个变量赋值（使用逗号分隔）</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num1,f1,str1 = <span class="hljs-number">100</span>,<span class="hljs-number">3.14</span>,<span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num1<br><span class="hljs-number">100</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>f1 <br><span class="hljs-number">3.14</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>str1<br>hello<br></code></pre></td></tr></table></figure><h3 id="3、复合赋值运算符"><a href="#3、复合赋值运算符" class="headerlink" title="3、复合赋值运算符"></a>3、复合赋值运算符</h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>描述</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>+&#x3D;</td><td>加法赋值运算符</td><td>c +&#x3D; a 等效于c &#x3D;  c + a</td></tr><tr><td>-&#x3D;</td><td>减法赋值运算符</td><td>c -&#x3D; a 等效于c &#x3D;  c - a</td></tr><tr><td>*&#x3D;</td><td>乘法赋值运算符</td><td>c *&#x3D; a 等效于c &#x3D;  c * a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值运算符</td><td>c &#x2F;&#x3D; a 等效于c &#x3D;  c &#x2F; a</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>取整赋值运算符</td><td>c &#x2F;&#x2F;&#x3D; a 等效于c &#x3D;  c &#x2F;&#x2F; a</td></tr><tr><td>%&#x3D;</td><td>取模赋值运算符</td><td>c %&#x3D; a 等效于c &#x3D;  c % a</td></tr><tr><td>**&#x3D;</td><td>幂赋值运算符</td><td>c **&#x3D; a 等效于c &#x3D;  c ** a</td></tr></tbody></table><ul><li>例子<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">100</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a += <span class="hljs-number">1</span> <span class="hljs-comment"># 相当于执行了 a = a + 1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">101</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">100</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a -= <span class="hljs-number">1</span> <span class="hljs-comment"># 相当于执行了 a = a - 1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">99</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">100</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a *= <span class="hljs-number">1</span> <span class="hljs-comment"># 相当于 a = a * 1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">100</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">100</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a /= <span class="hljs-number">1</span> <span class="hljs-comment"># 相当于 a = a / 1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">100</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">11</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a //= <span class="hljs-number">2</span> <span class="hljs-comment"># 相当于 a = a // 2 (整除)</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">5</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">11</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a %= <span class="hljs-number">2</span> <span class="hljs-comment"># 相当于 a = a % 2 (取余，取模，模余)</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">1</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">11</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a **= <span class="hljs-number">2</span> <span class="hljs-comment"># 相当于 a = a ** 2 (幂)</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br><span class="hljs-number">121</span><br></code></pre></td></tr></table></figure></li></ul><ul><li>总结<blockquote><p>+&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; %&#x3D; **&#x3D;<br>+&#x3D; 最常用</p></blockquote></li></ul><h3 id="4、比较运算符"><a href="#4、比较运算符" class="headerlink" title="4、比较运算符"></a>4、比较运算符</h3><ul><li>以下假设变量a为10，变量b为20:</li></ul><table><thead><tr><th><strong>运算符</strong></th><th><strong>描述</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于：比较对象是否相等</td><td>(a&#x3D;&#x3D;b)返回 False</td></tr><tr><td>!&#x3D;</td><td>不等于：比较两个对象是否不相等</td><td>(a !&#x3D; b) 返回True</td></tr><tr><td>&gt;</td><td>大于：返回x是否大于y</td><td>(a&gt;b)返回 False</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于：返回x是否大于等于y</td><td>(a&gt;&#x3D;b)返回 False</td></tr><tr><td>&lt;</td><td>小于：返回x是否小于y</td><td>(a&lt;b) 返回True</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于：返回x是否小于等于y</td><td>(a&lt;&#x3D;b) 返回True</td></tr></tbody></table><ul><li>代码实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 比较运算符返回的都是boolean类型的数据</span><br><br><span class="hljs-comment"># == 恒等  判断 == 两边的变量是否是一致</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a == b) <span class="hljs-comment">#  True</span><br><br><span class="hljs-comment"># != 不等 判断 != 两边的变量是否不一致</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a != b) <span class="hljs-comment"># False</span><br><span class="hljs-comment"># 扩展： &lt;&gt;这个不等是python2 版本使用的 python3 被遗弃了 不支持了</span><br><br><span class="hljs-comment"># &gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># &gt;= 大于等于</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt;= <span class="hljs-number">10</span>) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt;= <span class="hljs-number">5</span>) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt;= <span class="hljs-number">20</span>) <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># &lt; 小于</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &lt; <span class="hljs-number">20</span>) <span class="hljs-comment">#True</span><br><br><span class="hljs-comment"># &lt;= 小于等于</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &lt;= <span class="hljs-number">10</span>) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">20</span> &lt;= <span class="hljs-number">10</span>) <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><h3 id="5、逻辑运算符"><a href="#5、逻辑运算符" class="headerlink" title="5、逻辑运算符"></a>5、逻辑运算符</h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>逻辑表达式</strong></th><th><strong>描述</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>只要有一个运算数是False，结果就是False；<br />只有所有的运算数都为True时，结果才是True；<br />做取值运算时，取第一个为False的值；如果所有的值都为False，则取最后一个值</td><td>True and True and False 结果为False；<br />True and True and True 结果为True<br /></td></tr><tr><td>or</td><td>x or y</td><td>只要有一个运算数是True，结果就是True；<br />只有所有的运算数都为False时，结果才是False；<br />做取值运算时，取第一个为True的值，如果值都为False，取最后一个值</td><td>False or False or True  结果为True；<br />False or False or False 结果为False；<br /></td></tr><tr><td>not</td><td>not x</td><td>布尔 “非”  如果x为True 则返回False；如果x为False，则返回True。</td><td>not True &gt;False；<br />not False &gt;True<br /></td></tr></tbody></table><ul><li>代码实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 逻辑运算符 and（与） or（或） not （非）</span><br><br><span class="hljs-comment"># and 与</span><br><span class="hljs-comment"># and 两边的数据 必须全部都是True的时候 才会返回True 只要一端返回的是False  那么就返回False</span><br><span class="hljs-comment"># and 两边都是False的时候 返回的是False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span> &gt; <span class="hljs-number">11</span>)<br><span class="hljs-comment"># and 一边是False，一边是True的时候 返回的是False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span> &gt; <span class="hljs-number">11</span>)<br><span class="hljs-comment"># and 两边返回的都是True则返回的是True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span> &gt; <span class="hljs-number">4</span>)<br><br><span class="hljs-comment"># or 或者</span><br><span class="hljs-comment"># or 的两端都是False 则返回的是False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span> &gt; <span class="hljs-number">11</span>)<br><span class="hljs-comment"># or 的两端 前面的一端为True 后面的一端为False 则返回的是True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span> &gt; <span class="hljs-number">11</span>)<br><span class="hljs-comment"># or 的两端 前面的一端为False 后面的一端为True 则返回的是True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span> &gt; <span class="hljs-number">1</span>)<br><span class="hljs-comment"># or 的两端都是True 则返回的是True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> &gt; <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-number">10</span> &gt; <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># not 非 取反</span><br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> <span class="hljs-literal">True</span>) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> <span class="hljs-literal">False</span>) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> (<span class="hljs-number">10</span> &gt; <span class="hljs-number">30</span>)) <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><ul><li>逻辑运算符的性能优化<ul><li><p>实例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># and 的性能优化</span><br>a = <span class="hljs-number">36</span><br>a &gt; <span class="hljs-number">10</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello word&quot;</span>) <span class="hljs-comment">#  输出 hello word</span><br><span class="hljs-comment"># and的性能优化 当and 前面的结果是False的情况下 那么后面的代码就不再执行了</span><br>a &lt; <span class="hljs-number">10</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello word&quot;</span>) <span class="hljs-comment"># 不输出</span><br><br><span class="hljs-comment"># or 的性能优化</span><br><span class="hljs-comment"># or 只要一方为True 那么结果就是True</span><br>a = <span class="hljs-number">38</span> <br>a &gt; <span class="hljs-number">39</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello word&#x27;</span>) <span class="hljs-comment"># 输出 hello word</span><br><span class="hljs-comment"># 前面为True了 后面就不做判断了</span><br>a &gt; <span class="hljs-number">37</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello word&#x27;</span>) <span class="hljs-comment"># 不会执行hello word</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="1、输出"><a href="#1、输出" class="headerlink" title="1、输出"></a>1、输出</h3><ul><li>普通输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;一个代码狗&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>格式化输出<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># scrapy框架的时候 excel文件 mysql redis</span><br>age = <span class="hljs-number">18</span><br>name= <span class="hljs-string">&quot;test&quot;</span><br><br><span class="hljs-comment"># %s代表的是 字符串 %d代表的是数值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我的名字是%s,我的年龄是%d&quot;</span> % (name,age)) <span class="hljs-comment"># 我的名字是test，我的年龄是18</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2、输入"><a href="#2、输入" class="headerlink" title="2、输入"></a>2、输入</h3><ul><li>代码实例</li></ul><pre><code class="python">password = input(&quot;请输入您的密码&quot;)print(&quot;我的密码是%s&quot; % password)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫-类型转换</title>
    <link href="/2022/08/29/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>/2022/08/29/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>int(x)</td><td>将x转换为一个整数</td></tr><tr><td>float(x)</td><td>将x转换为一个浮点数</td></tr><tr><td>str(x)</td><td>将x转换为一个字符串</td></tr><tr><td>bool(x)</td><td>将x转换为一个布尔值</td></tr></tbody></table><h3 id="转换为整数"><a href="#转换为整数" class="headerlink" title="转换为整数"></a>转换为整数</h3><ul><li>注意<ul><li>123.456和12ab字符串都包含非法字符，不能转换成整数，会报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># str --&gt; int</span><br>a = <span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;123&quot;</span>)) <span class="hljs-comment"># 123 将字符串转换成为整数</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-number">123.78</span>)) <span class="hljs-comment"># 123 将浮点数转换成为整数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-literal">True</span>)) <span class="hljs-comment"># 1 布尔值True转换成为整数是1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-literal">False</span>)) <span class="hljs-comment"># 0 布尔值False转换成为整数是0</span><br></code></pre></td></tr></table></figure><h3 id="转换浮点数"><a href="#转换浮点数" class="headerlink" title="转换浮点数"></a>转换浮点数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">f1 = <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;12.34&quot;</span>)<br><span class="hljs-built_in">print</span>(f1) <span class="hljs-comment"># 12.34</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(f1)) <span class="hljs-comment"># float 将字符串的“12.34”转换成浮点数12.34</span><br><br>f2 = <span class="hljs-built_in">float</span>(<span class="hljs-number">23</span>)<br><span class="hljs-built_in">print</span>(f2) <span class="hljs-comment"># 23.0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(f2)) <span class="hljs-comment"># float 将整数转换成为了浮点数</span><br></code></pre></td></tr></table></figure><h3 id="转换字符串"><a href="#转换字符串" class="headerlink" title="转换字符串"></a>转换字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-built_in">str</span>(<span class="hljs-number">45</span>)<br>str2 = <span class="hljs-built_in">str</span>(<span class="hljs-number">34.56</span>)<br>str3 = <span class="hljs-built_in">str</span>(<span class="hljs-literal">True</span>) <span class="hljs-comment"># True（str）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(str1),<span class="hljs-built_in">type</span>(str2),<span class="hljs-built_in">type</span>(str3))<br><br><span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt; &lt;class &#x27;str&#x27;&gt; &lt;class &#x27;str&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="转换成布尔值"><a href="#转换成布尔值" class="headerlink" title="转换成布尔值"></a>转换成布尔值</h3><ul><li>注意<ul><li>如果对非0的整数进行bool类型的转换 那么就全部是True；在整数范围内 0强制转换为bool类型的结果是False；</li><li>将浮点数转换为bool类型的数据时候 正的浮点数和负的浮点数的结果都是True；  如果是0.0 则是False；</li><li>只要字符串有内容，那么强制类型转换为bool的时候，那么就返回True；空格也是True 留空是False；</li><li>只要列表中有数据，那么强制转换为bool的时候，就返回True；无数据 则返回False；</li><li>只要元组中有数据，那么强制转换为bool的时候，就返回Ture；无数据 则返回False；</li><li>只要字典中有内容，那么强制转换为bool的时候，就返回True；无数据 则返回False；</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 什么情况下为False</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&#x27;&#x27;</span>)) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">0</span>)) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(&#123;&#125;)) <span class="hljs-comment"># False 字典为空</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>([])) <span class="hljs-comment"># False 列表为空</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(())) <span class="hljs-comment"># False 元组为空</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红日靶场（一）（下）</title>
    <link href="/2022/08/28/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%911%E4%B8%8B/"/>
    <url>/2022/08/28/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%911%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="红日内网靶场——红队评估-一-下"><a href="#红日内网靶场——红队评估-一-下" class="headerlink" title="红日内网靶场——红队评估(一)(下)"></a>红日内网靶场——红队评估(一)(下)</h1><h4 id="四、内网信息收集"><a href="#四、内网信息收集" class="headerlink" title="四、内网信息收集"></a>四、内网信息收集</h4><h5 id="4-1、webshell信息收集并上线CS"><a href="#4-1、webshell信息收集并上线CS" class="headerlink" title="4.1、webshell信息收集并上线CS"></a>4.1、webshell信息收集并上线CS</h5><ul><li>查看用户权限(whoami)和是否存在杀软(tasklist)</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/28.png"></p><ul><li><p>不存在杀软，尝试上线CS</p><ul><li>先选择 Packages– Windows Executable(S)</li></ul></li></ul><p> <img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/29.png"></p><ul><li>选择自己建的Listener，Output选择PWindows ExE,如果是64位的系统就钩上Use X64 payload并选择保存的位置</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/30.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/31.png"></p><ul><li>将生成的exe文件利用哥斯拉上传到服务器</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/32.png"></p><ul><li>执行该程序</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/33.png"></p><ul><li>查看CS，成功上线</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/34.png"></p><h4 id="五、利用CS进行信息收集"><a href="#五、利用CS进行信息收集" class="headerlink" title="五、利用CS进行信息收集"></a>五、利用CS进行信息收集</h4><h5 id="5-1-1、系统信息收集"><a href="#5-1-1、系统信息收集" class="headerlink" title="5.1.1、系统信息收集"></a>5.1.1、系统信息收集</h5><ul><li>查看IP信息(ipconfig &#x2F;all)<ul><li>存在域(god.org)且DC的Ip为192.52.138</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/35.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/36.png"></p><ul><li>查看工作站运行(net config Workstation)</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/37.png"></p><ul><li>显示当前域的计算机列表(net view)</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/38.png"></p><h5 id="5-1-2、主机密码收集"><a href="#5-1-2、主机密码收集" class="headerlink" title="5.1.2、主机密码收集"></a>5.1.2、主机密码收集</h5><ul><li>利用CS的logonpasswords抓取密码</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/39.png"></p><ul><li>利用CS的hashdump抓一波hash</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/47.png"></p><ul><li>所有凭据如下</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/48.png"></p><h5 id="5-1-3、内网主机收集"><a href="#5-1-3、内网主机收集" class="headerlink" title="5.1.3、内网主机收集"></a>5.1.3、内网主机收集</h5><ul><li><p>使用CS自带的端口扫描扫一波主机</p><ul><li><code>portscan 192.168.170.0-192.168.170.255 1-1025,2289,5000-600 arp 1024</code></li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/44.png"></p><ul><li>扫面出来的主机在View-Targets里面</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/46.png"></p><ul><li>结果如下</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/45.png"></p><h4 id="六、内网横向渗透"><a href="#六、内网横向渗透" class="headerlink" title="六、内网横向渗透"></a>六、内网横向渗透</h4><h5 id="6-1-1、主机提权"><a href="#6-1-1、主机提权" class="headerlink" title="6.1.1、主机提权"></a>6.1.1、主机提权</h5><ul><li>whoami &#x2F;all 发现是administrator权限</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/40.png"></p><ul><li><p>利用计划任务权限维持尝试反弹system权限</p><ul><li><code>schtasks /create /ru system /tn &quot;Microsoft\Windows\Multimedia\SystemMediaService&quot; /sc MINUTE /mo 50  /tr &quot;C:\Windows\system.exe&quot; /st 16:22 /f</code> (创建一个名为Microsoft\Windows\Multimedia\SystemMediaService, 16:22开始执行，每50分钟执行一次)</li><li><code>SCHTASKS /Run /TN &quot;Microsoft\Windows\Multimedia\SystemMediaService&quot; /f </code>(启动计划任务)</li><li>成功反弹system权限</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/41.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/42.png"></p><ul><li>删除计划任务<ul><li><code>schtasks /delete /tn &quot;Microsoft\Windows\Multimedia\SystemSoundsService&quot; /f</code>(删除计划任务)</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/43.png"></p><h5 id="6-1-2、不出网主机上线"><a href="#6-1-2、不出网主机上线" class="headerlink" title="6.1.2、不出网主机上线"></a>6.1.2、不出网主机上线</h5><ul><li><p>不出网机器上线一般有三种方式上线</p><ul><li>使用smb beacon</li><li>配置listener通过HTTP代理上线</li><li>使用pystinger搭建 socks4代理</li></ul></li><li><p>学习使用SMB beacon</p><ul><li><code>SMB Beacon使用命名管道通过父级Beacon进行通讯，当两个Beacons链接后，子Beacon从父Beacon获取到任务并发送。因为链接的Beacons使用Windows命名管道进行通信，此流量封装在SMB协议中，所以SMBbeacon相对隐蔽。SMB beacon不能直接生成可用载荷, 只能使用 PsExec 或 Stageless Payload 上线</code></li><li><code>首先得到内网中一台主机的beacon，抓取密码后进行smb喷射，得到另一台开放445端口的机器上的administrator账户密码，在目标机器不出网的情况下，可以使用Smb</code></li></ul></li><li><p>使用条件</p><ul><li>具有 SMB Beacon 的主机必须接受 445 端口上的连接</li><li>只能链接由同一个 Cobalt Strike 实例管理的 Beacon。</li><li>利用这种beacon横移必须有目标主机的管理员权限或者说是拥有具有管理员权限的凭据。</li></ul></li><li><p>使用方法</p><ul><li>1、建立smb listener</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/49.png"></p><ul><li>在cs中使用psexec进行横向移动，选择现有的beacon作为跳板，凭据必须是administrator，拥有目标主机管理员权限</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/50.png"></p><ul><li>连接成功，可以看到smb beacon上线的主机右侧有∞∞标识，如果出网主机掉线了，那么这太不出网的也会断</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/51.png"></p><ul><li>尝试利用同样方法拿下域控</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/52.png"></p><ul><li>域控已上线</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/53.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/54.png"></p><h4 id="七、小结"><a href="#七、小结" class="headerlink" title="七、小结"></a>七、小结</h4><ul><li>此次由于刚接触内网 所以只用了SMB横向，等在学习学习尝试用永恒之蓝横向</li><li>新手上路，多多指教</li></ul>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>应急响应（一）</title>
    <link href="/2022/08/27/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E5%9C%BA1/"/>
    <url>/2022/08/27/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E5%9C%BA1/</url>
    
    <content type="html"><![CDATA[<h1 id="应急响应靶场——-Win2008-WK木马"><a href="#应急响应靶场——-Win2008-WK木马" class="headerlink" title="应急响应靶场——(Win2008)WK木马"></a>应急响应靶场——(Win2008)WK木马</h1><h3 id="一、靶场出处"><a href="#一、靶场出处" class="headerlink" title="一、靶场出处"></a>一、靶场出处</h3><p>想要学习应急响应，然后就去找靶场，然后发现这位师傅有靶场环境，还有复现环境，故此学习一下。</p><ul><li><a href="https://wxiaoge.blog.csdn.net/?type=blog">https://wxiaoge.blog.csdn.net/?type=blog</a></li></ul><h3 id="二、靶场事件背景"><a href="#二、靶场事件背景" class="headerlink" title="二、靶场事件背景"></a>二、靶场事件背景</h3><ul><li><p>服务器疑似被入侵，风扇噪声很大</p></li><li><p>服务器为Windows2008，IP为192.168.226.137</p></li></ul><p><img src="/../images/yjxy-1/1.png"></p><h3 id="三、应急响应过程"><a href="#三、应急响应过程" class="headerlink" title="三、应急响应过程"></a>三、应急响应过程</h3><ul><li>一般情况下，CPU消耗很大的情况下风扇的噪声才会很大，应该是WK木马</li></ul><h4 id="3-1-排查服务器病毒程序"><a href="#3-1-排查服务器病毒程序" class="headerlink" title="3.1 排查服务器病毒程序"></a>3.1 排查服务器病毒程序</h4><h5 id="3-1-1、确认是否为WK"><a href="#3-1-1、确认是否为WK" class="headerlink" title="3.1.1、确认是否为WK"></a>3.1.1、确认是否为WK</h5><ul><li>发现服务器开了个java程序，上面带有一个外链网站</li></ul><p><img src="/../images/yjxy-1/2.png"></p><ul><li>微步在线 去查该外链URL，发现该URL为矿池</li></ul><p><img src="/../images/yjxy-1/3.png"></p><ul><li>通过查看任务管理器 发现该程序占用的 内存以及cpu使用率非常大</li></ul><p><img src="/../images/yjxy-1/4.png"></p><ul><li>右键打开该WK程序的位置，发现目录名字为wkxx<ul><li>C:\Users\Administrator\Downloads\wkbd\wkbd\javs.exe</li></ul></li></ul><p><img src="/../images/yjxy-1/5.png"></p><ul><li>通过查看config.json,发现Kuang池地址及其用户信息</li></ul><p><img src="/../images/yjxy-1/6.png"></p><ul><li>将java.exe上传到微步云沙箱，发现被标记为恶意软件</li></ul><p><img src="/../images/yjxy-1/7.png"></p><ul><li>确定是 WK程序了，在任务管理器结束掉，但是发现过一会儿该程序又运行了</li></ul><p><img src="/../images/yjxy-1/8.png"></p><p><img src="/../images/yjxy-1/9.png"></p><h5 id="3-1-2、深度排查服务器"><a href="#3-1-2、深度排查服务器" class="headerlink" title="3.1.2、深度排查服务器"></a>3.1.2、深度排查服务器</h5><ul><li>查看计划任务 taskschd.msc</li></ul><p><img src="/../images/yjxy-1/10.png"></p><ul><li>计划任务程序里面发现一个名称为system的计划任务是正在运行的</li></ul><p><img src="/../images/yjxy-1/11.png"></p><ul><li>点开该计划任务，查看操作发现是启动程序任务，并且启动程序的地址是指向WK程序的</li></ul><p><img src="/../images/yjxy-1/12.png"></p><ul><li>继续查看发现是Administrator用户在3月13号创建的计划任务</li></ul><p><img src="/../images/yjxy-1/13.png"></p><ul><li>删除该计划任务并任务管理器结束该进程和删除WK程序的目录</li></ul><p><img src="/../images/yjxy-1/14.png"></p><h4 id="3-2、排查服务器后门"><a href="#3-2、排查服务器后门" class="headerlink" title="3.2、排查服务器后门"></a>3.2、排查服务器后门</h4><h5 id="3-2-1、查看可疑进程"><a href="#3-2-1、查看可疑进程" class="headerlink" title="3.2.1、查看可疑进程"></a>3.2.1、查看可疑进程</h5><ul><li>使用利用Autoruns查看服务器是否有可疑进程<ul><li>未发现可疑进程</li></ul></li></ul><p><img src="/../images/yjxy-1/15.png"></p><h5 id="3-2-2、查看是否存在可疑的启动项"><a href="#3-2-2、查看是否存在可疑的启动项" class="headerlink" title="3.2.2、查看是否存在可疑的启动项"></a>3.2.2、查看是否存在可疑的启动项</h5><ul><li>用Autoruns查看是否有可疑的启动项<ul><li>未发现可疑的启动项</li></ul></li></ul><p><img src="/../images/yjxy-1/16.png"></p><h5 id="3-2-3、查看计划任务"><a href="#3-2-3、查看计划任务" class="headerlink" title="3.2.3、查看计划任务"></a>3.2.3、查看计划任务</h5><ul><li>查看计划任务，之前WK计划任务已经被删除，所以现在无异常的计划任务</li></ul><p><img src="/../images/yjxy-1/17.png"></p><h5 id="3-2-4、查看服务"><a href="#3-2-4、查看服务" class="headerlink" title="3.2.4、查看服务"></a>3.2.4、查看服务</h5><ul><li>未发现可疑的服务</li></ul><p><img src="/../images/yjxy-1/18.png"></p><h5 id="3-2-5、查看镜像劫持"><a href="#3-2-5、查看镜像劫持" class="headerlink" title="3.2.5、查看镜像劫持"></a>3.2.5、查看镜像劫持</h5><ul><li>发现shift粘贴键后门，后门路径C:\windows\system32\cmd.exe 可以在不登录服务器的情况下，以Administrator权限 执行cmd</li></ul><p><img src="/../images/yjxy-1/19.png"></p><h5 id="3-2-6、查看是否有隐藏用户"><a href="#3-2-6、查看是否有隐藏用户" class="headerlink" title="3.2.6、查看是否有隐藏用户"></a>3.2.6、查看是否有隐藏用户</h5><ul><li>通过 控制面板\所有控制面板项\用户帐户\管理帐户 里面只有administrator和guest用户</li></ul><p><img src="/../images/yjxy-1/20.png"></p><ul><li>通过注册表查看 HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names 发现wxiaoge$</li></ul><p><img src="/../images/yjxy-1/21.png"></p><h4 id="3-3、排查网络连接"><a href="#3-3、排查网络连接" class="headerlink" title="3.3、排查网络连接"></a>3.3、排查网络连接</h4><ul><li>使用netstat -ano 查看网络连接，未发现可疑连接</li></ul><p><img src="/../images/yjxy-1/22.png"></p><h4 id="四、应急响应溯源"><a href="#四、应急响应溯源" class="headerlink" title="四、应急响应溯源"></a>四、应急响应溯源</h4><h5 id="4-1-1、查看WK木马的计划任务创建时间"><a href="#4-1-1、查看WK木马的计划任务创建时间" class="headerlink" title="4.1.1、查看WK木马的计划任务创建时间"></a>4.1.1、查看WK木马的计划任务创建时间</h5><ul><li>WK木马的创建者是Administrator,创建时间是2022-03-23 9:46:17</li></ul><p><img src="/../images/yjxy-1/13.png"></p><h5 id="4-2-1-排查安全日志"><a href="#4-2-1-排查安全日志" class="headerlink" title="4.2.1 排查安全日志"></a>4.2.1 排查安全日志</h5><ul><li>分析安全日志 ，发现21号有大量的爆破</li></ul><p><img src="/../images/yjxy-1/25.png"></p><ul><li>但是均未发现ip地址</li></ul><p><img src="/../images/yjxy-1/26.png"></p><p><img src="/../images/yjxy-1/27.png"></p><ul><li>接着查找，发现2022&#x2F;3&#x2F;21 16:27:12，IP：192.168.226.1成功登录该服务器</li></ul><p><img src="/../images/yjxy-1/28.png"></p><ul><li>继续排查，发现在 2022&#x2F;3&#x2F;21 16:28:12 黑客使用administrator账户创建了隐藏账户 wxiaoge$</li></ul><p><img src="/../images/yjxy-1/29.png"></p><ul><li>继续排查系统日志，发现在 2022&#x2F;3&#x2F;23 9:36:02 服务器去解析 xmr.usa-138.com 域名，这个域名是公共矿池，说明此时已经植入挖矿程序并且运行</li></ul><p><img src="/../images/yjxy-1/30.png"></p><h4 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h4><h5 id="5-1-1、寻找WK小结"><a href="#5-1-1、寻找WK小结" class="headerlink" title="5.1.1、寻找WK小结"></a>5.1.1、寻找WK小结</h5><ul><li>1、WaKuang病毒位置：C:\Users\Administrator\Downloads\wkbd\wkbd\ 目录<ul><li>删除C:\Users\Administrator\Downloads\wkbd\wkbd\ 目录</li></ul></li><li>2、存在挖矿程序的计划任务，任务名字system<ul><li>删除挖矿程序的计划任务。</li></ul></li></ul><h5 id="5-1-2-排查小结"><a href="#5-1-2-排查小结" class="headerlink" title="5.1.2 排查小结"></a>5.1.2 排查小结</h5><ul><li><p>1、存在Windows隐藏用户</p><ul><li>通过注册表找到并删除</li></ul></li><li><p>2、存在shift粘贴键后门</p><ul><li>删除sethc.exe</li></ul></li></ul><h5 id="5-1-3溯源小结"><a href="#5-1-3溯源小结" class="headerlink" title="5.1.3溯源小结"></a>5.1.3溯源小结</h5><ul><li>根据日志推测：<ul><li>黑客在2022&#x2F;3&#x2F;21 16:27:12对服务器爆破administrarot成功，用ip为192.168.226.1登录成功</li><li>在2022&#x2F;3&#x2F;21 16:28:12使用administrator服务器创建了隐藏用户wxiaoge</li><li>在2022&#x2F;3&#x2F;23 9:36:02 植入挖矿程序并且运行</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>应急</category>
      
    </categories>
    
    
    <tags>
      
      <tag>应急响应</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红日靶场（一）（上）</title>
    <link href="/2022/08/26/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%911/"/>
    <url>/2022/08/26/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%911/</url>
    
    <content type="html"><![CDATA[<h1 id="红日内网靶场——红队评估-一-上"><a href="#红日内网靶场——红队评估-一-上" class="headerlink" title="红日内网靶场——红队评估(一)(上)"></a>红日内网靶场——红队评估(一)(上)</h1><h4 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h4><h5 id="1-1、环境部署"><a href="#1-1、环境部署" class="headerlink" title="1.1、环境部署"></a>1.1、环境部署</h5><ul><li>WIN7 （web服务器） 双网卡（内外网 IP）<ul><li>网卡 1 IP:192.168.52.143 （内网服务器 存在yxcms）</li><li>网卡 2 IP:192.168.17.130（外网DHCP自动获取）</li></ul></li><li>WIN 2008（域控） 单内网网卡<ul><li>网卡IP：192.168.52.138</li></ul></li><li>WIN 2003 （域成员） 单内网卡<ul><li>网卡IP ：192.168.52.141</li></ul></li><li>Kali （攻击机） 外网网卡<ul><li>网卡IP：192.168.17.131</li></ul></li></ul><h5 id="1-2、拓扑图"><a href="#1-2、拓扑图" class="headerlink" title="1.2、拓扑图"></a>1.2、拓扑图</h5><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/1.png"></p><h4 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h4><h5 id="2-1、页面信息收集"><a href="#2-1、页面信息收集" class="headerlink" title="2.1、页面信息收集"></a>2.1、页面信息收集</h5><ul><li>192.168.17.130 打开是一个phpstudy的探针<ul><li>有一个数据库测试功能，尝试弱口令 root&#x2F;root，测试正常，说明数据库存在弱口令</li><li>发现了绝对路径和一些组件的版本信息，绝对路径可以sql注入写shell，版本信息可以找一些历史漏洞</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/2.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/3.png"></p><h5 id="2-2、端口加敏感目录扫描"><a href="#2-2、端口加敏感目录扫描" class="headerlink" title="2.2、端口加敏感目录扫描"></a>2.2、端口加敏感目录扫描</h5><ul><li>使用nmap对192.168.17.130进行端口扫描 找找是否存在高危端口<ul><li>存在3306端口，是mysql的端口，刚才已经知道有弱口令了，一会儿可以直接利用。</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/4.png"></p><ul><li>使用dirb扫描目录 探测是否存在敏感目录<ul><li>存在phpmyadmin，知道绝对路径，可以尝试写shell</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/5.png"></p><ul><li>登陆phpmyadmin看看是否有可以利用的数据<ul><li>root&#x2F;root 弱口令登陆成功</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/6.png"></p><ul><li>发现存在yxcms的数据库，尝试访问yxcms的路径。</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/8.png"></p><h5 id="2-3、yxcms的信息收集"><a href="#2-3、yxcms的信息收集" class="headerlink" title="2.3、yxcms的信息收集"></a>2.3、yxcms的信息收集</h5><ul><li>观察页面，发现公告上写着后台路径和 默认口令<ul><li>后台路径：&#x2F;index.php?r&#x3D;admin 默认口令：admin&#x2F;123456</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/9.png"></p><ul><li>访问后台尝试默认密码登陆</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/10.png"></p><ul><li>登陆成功</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/11.png"></p><ul><li>通过观察后台页面，发现 有一个前台模版新建模版的功能点，可以直接写 php文件。</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/12.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/13.png"></p><h4 id="三、漏洞利用"><a href="#三、漏洞利用" class="headerlink" title="三、漏洞利用"></a>三、漏洞利用</h4><h5 id="3-1、利用phpmyadmin写shell"><a href="#3-1、利用phpmyadmin写shell" class="headerlink" title="3.1、利用phpmyadmin写shell"></a>3.1、利用phpmyadmin写shell</h5><ul><li>直接通过 SQL 查询语句 outfile 写入一句话木马，先看是否存在写入的权限<ul><li>show global variables like ‘%secure%’;<ul><li>显示为NULL 只可读不可写</li></ul></li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/14.png"></p><ul><li><p>开启全局日志getshell</p><ul><li>show variables like ‘%general%’;查询全局日志变量配置</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/15.png"></p><ul><li>开启general_log将所有查询语句都记录到指定可以访问的文件中</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/16.png"></p><ul><li>日志记录的目录，是绝对路径，在php探针上已经拿到。</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/17.png"></p><ul><li>检查是否更改成功</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/17.png"></p><ul><li>尝试写入一句话木马. 就算报错日志也会记录下来。</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/18.png"></p><ul><li>尝试用哥斯拉连接  成功</li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/19.png"></p><h5 id="3-2、yxcms上传webshell"><a href="#3-2、yxcms上传webshell" class="headerlink" title="3.2、yxcms上传webshell"></a>3.2、yxcms上传webshell</h5><ul><li>利用前台模版新建一个php页面，写上一句话木马，抓包看看是否有回显路径<ul><li>并没有返回URL的路径，只能试试别的办法</li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/20.png"></p><ul><li><p>没有路径 可以看看robots.txt 或者去做目录扫描，看看是否有新的发现</p><ul><li><p>访问robots.txt 看是否存在可利用的目录</p><ul><li>存在&#x2F;data &#x2F;protected目录 访问了一下 发现有个目录浏览，找到刚才传的she_ll.php</li></ul></li></ul></li></ul><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/22.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/23.png"></p><pre><code class="hljs">- 路径http://192.168.17.130/yxcms//protected/apps/default/view/default/she_ll.php</code></pre><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/25.png"></p><pre><code class="hljs">- 尝试连接</code></pre><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/26.png"></p><p><img src="/../images/%E7%BA%A2%E6%97%A5%E5%86%85%E7%BD%91%201/27.png"></p>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
